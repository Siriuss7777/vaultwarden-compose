{"version":3,"file":"543.af1f0bbf1b53c663388b.js","mappings":"+VAWO,SAASA,EAAqBC,GACnC,MAAsB,KAAlBA,EAAQC,OAAiBD,EAAQC,YALJC,IAK4BF,EAAQC,MAPhEE,MAAM,KACNC,KAAKC,GAAU,WAAkC,CAAEJ,MAAOI,EAAMC,WAChEC,MAAMC,GAAY,OAANA,IAQV,CAAEC,eAAgB,CAAEC,QAAS,wBAF3B,IAGX,C,mTCHM,iBACE,yCAME,4DAAU,QAAAC,eAAc,IAN1B,QAQA,yCACE,S,gBACF,QACF,2B,6CARI,0CAAyB,WAAzB,CAAyB,uBAKI,4BAC7B,4D,2BAXN,SACE,2CAaF,2B,mCAbiB,wC,ECFd,MAAMC,EAJb,cAKU,KAAAC,SAAW,IAAIC,EAAA,EAIb,KAAAC,YAAc,IAAI,MAClB,KAAAC,cAAgB,IAAI,K,CAE1BC,0BACF,OACEC,KAAKC,SAASC,MAAK,EAAEC,EAAKrB,KAA8B,GAAjBA,EAAQC,UAC9CiB,KAAKC,SAASG,OAAM,EAAED,EAAKrB,KAA8B,GAAjBA,EAAQC,OAErD,CAEAsB,WACEL,KAAKM,WAAWC,SAASP,KAAKQ,UAAUC,aACrCC,MAAK,EAAAC,EAAA,GAAUX,KAAKL,WACpBiB,WAAW7B,IACV8B,OAAOC,OAAOd,KAAKM,WAAWC,UAAUQ,SAASjC,GAC/CA,EAAQkC,SAASjC,EAAO,CAAEkC,WAAW,KACtC,GAEP,CAEYC,qBACV,OAAOlB,KAAKM,WAAWC,SAASP,KAAKQ,SACvC,CAEIP,eACF,OAAOY,OAAOM,QAAQnB,KAAKM,WAAWC,UAAUa,QAAO,EAAEjB,EAAKpB,KAAWoB,GAAOH,KAAKQ,UACvF,CAEUf,eACR,MAAM4B,EAAgBrB,KAAKC,SAASG,OAAM,EAAED,EAAKpB,KAA0B,GAAfA,EAAMA,QAClEiB,KAAKkB,eAAeF,SAASK,EAAe,CAAEJ,WAAW,GAC3D,CAEUd,IAAImB,EAAeC,GAC3B,OAAOA,EAAKpB,GACd,CAEAqB,cACExB,KAAKL,SAAS8B,OACdzB,KAAKL,SAAS+B,UAChB,CAEAC,UAAUC,GACR,OAAO,sBAAwBA,EACjC,E,iCAjDWlC,EAAuB,E,mBAAvBA,EAAuB,kdDXpC,iBACE,mCAOA,mCACE,S,gBACF,QACA,iCACE,mD,qBAeF,yBACF,uBACA,gB,MA7BK,gCAGD,+CAA4B,gBAA5B,CAA4B,6BAA5B,CAA4B,uCAKC,iCAC7B,sDAG4B,6DAAmC,sB,uFEwBvDmC,EAcAC,E,+TC9CN,mBAAsF,SAEpF,S,qBAFoF,6B,wBAGtF,mBAAuD,S,gBAAsB,S,MAAtB,qC,uBAGvD,SACE,sC,gBAKA,yCAAsB,S,gBAAsB,QAC9C,6B,MAJI,6CAGoB,qC,wBAIpB,SACE,uCAAG,S,gBAA6B,QAChC,oDACE,iDAAW,S,iBAAoB,QAC/B,kDACA,kDAAU,U,iBAA4C,QACxD,mCACF,kC,MANK,4CAEU,oCAED,2D,wBA8FR,SACE,kDACE,S,gBACE,gBAAyD,S,gBAEzD,QACD,S,gBACH,QACF,wC,MANI,sFAC2D,yDAG1D,kF,wBAIH,kDACE,S,gBACF,QACF,+B,MAFI,wF,0CAMV,SACE,2CACE,S,gBACF,QACA,4CACE,8CACE,iDACE,sDAAgC,U,iBAAiC,QACjE,mDACA,oEAIA,yCACF,uCACF,qCACA,gDACE,kDACE,sDAAgC,U,iBAA+B,QAC/D,mDACA,iDACE,wDAMA,wDACE,U,iBACF,QACF,yCACA,iDACE,wDAMA,wDACE,U,iBACF,QACF,yCACA,iDACE,wDAMA,wDACE,U,iBACF,QACF,yCACA,oEAIA,yCACA,iDACE,wDAMA,wDACE,U,iBACF,QACF,yCACA,iDACE,wDAMA,wDACE,U,iBACF,QACF,yCACA,iDACE,wDAMA,wDACE,U,iBACF,QACF,yCACA,iDACE,wDAKE,4DAAU,QAAAC,6BAA4B,IALxC,QAOA,wDACE,U,iBACF,QACF,yCACA,iDACE,0DAKE,4DAAU,QAAAA,6BAA4B,IALxC,QAOA,0DACE,W,kBACF,QACF,0CACF,wCACF,sCACF,oCACF,iC,0BApHI,8EAEe,+CAGqB,kDAI9B,wFAO8B,iDAU5B,oGAWA,sGAWA,iGAKF,mFAWE,gGAWA,6FAWA,kGAYA,+FAYA,uG,yBAOZ,SACE,2CACE,S,gBACA,gB,gBAME,8CACF,oCACF,mCACA,4CAAyB,U,iBAAqC,QAC9D,wDACE,kDACA,mDACE,U,iBACF,QACF,mCACF,kC,MAjBI,sFAIE,sDAMqB,qDAIrB,gG,2BAUR,sB,gBACE,0CACE,S,gBACF,QACA,0D,iDAOF,gC,sBAXwC,mCAEpC,iFAIA,2CAA0B,oCAA1B,CAA0B,+CAA1B,CAA0B,kD,yBAO5B,kBACE,S,gBACF,S,MADE,0F,2BAmBF,kC,uEAEE,8CAAsC,2CAAtC,CAAsC,gCAAtC,CAAsC,uCAAtC,CAAsC,mDAAtC,CAAsC,sD,2CA1S5C,4BAAgC,gGAC9B,4C,gBACE,2DAQA,+CACE,+CAIE,U,iBACA,iB,iBAME,gDACF,qCACF,mCACA,8CACE,kDAQA,kDACE,U,iBACA,mBACE,U,iBACF,QACF,qCACF,mCACA,8CACE,kDAQA,kDACE,U,iBACA,mBACE,U,iBACF,QACF,qCACF,mCACA,8CACE,kDAQA,kDACE,U,iBACA,mBACE,U,iBACF,QACF,qCACF,mCACA,8CACE,kDAQA,kDACE,U,iBACA,mBACE,U,iBACF,QACF,qCACF,mCACA,8CACE,kDASA,kDACE,U,iBACA,oCASA,4EAKF,qCACF,mCACF,iCACA,8DAuHA,6DAoBA,oDACE,iDAAW,U,iBAAyB,QACpC,gDACA,gDAAU,U,kBAA6B,QACzC,kCACF,gCACA,yDAYA,gD,kBACE,qDAGA,8CACE,0DACE,oDACA,qDACE,W,kBACA,kB,kBAME,oDACF,wCACF,sCACA,oDAAU,W,kBAAuC,QACnD,oCACF,kCACA,sEAUD,QACH,6B,qCAnTgC,kCACrB,2CACQ,mCAaX,gFAIE,wDAUA,oDAMA,8EAEE,oFAQF,uDAMA,iFAEE,uFAQF,qDAMA,+EAEE,qFAQF,qDAMA,+EAEE,qFAQF,sDAIA,mDAGA,gFACe,kDAAgC,cAiBtC,gDAuHA,8CAqBF,0CAED,+CAGJ,gDAYD,oDACD,gDAOA,mGAIE,yDAMM,yDAIX,8C,4BA2BL,qBASE,S,gBACF,S,qBAJE,6BAAqB,sBAGrB,sE,4BAEF,qBASE,S,gBACF,S,qBAJE,4BAAoB,sBAGpB,qE,4BAEF,qB,sCAME,0CAAgC,qBAAhC,CAAgC,qB,GD9U1C,SAAYF,GACV,mBACA,uBACA,gCACD,CAJD,CAAYA,IAAAA,EAAe,KAc3B,SAAYC,GACV,gBACA,sBACA,oBACA,oBACA,qBACD,CAND,CAAYA,IAAAA,EAAkB,KAYvB,MAAME,GA0DXC,YACiCC,EACvBC,EACAC,EACAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,GAVuB,KAAAT,OAAAA,EACvB,KAAAC,UAAAA,EACA,KAAAC,YAAAA,EACA,KAAAC,qBAAAA,EACA,KAAAC,oBAAAA,EACA,KAAAC,YAAAA,EAEA,KAAAC,uBAAAA,EACA,KAAAC,aAAAA,EACA,KAAAC,YAAAA,EACA,KAAAC,wBAAAA,EApEV,KAAAC,SAAU,EACV,KAAAC,UAAW,EACX,KAAAC,WAAY,EAEZ,KAAAC,OAA6B,WAC7B,KAAAC,YAAgC,GAChC,KAAAC,qBAAuB,IAEvB,KAAAC,eAAiB,KAIP,KAAAC,sBAA0C,GAC1C,KAAAC,iBAAqC,GAErC,KAAAC,UAAYrD,KAAKuC,YAAYe,MAAM,CAC3CC,OAAQ,CAAC,GAAI,CAAC,cAAqB1E,IACnC2E,KAAM,SACNC,WAAYzD,KAAKuC,YAAYzD,QAAQ,CAAEC,MAAO,GAAI2E,UAAU,IAC5DC,sBAAsB,EACtBC,sBAAsB,EACtBb,OAAQ,CAAC,IACTc,OAAQ,CAAC,MAGD,KAAAC,iBAAmB9D,KAAKuC,YAAYe,MAAM,CAClDS,+BAAgC/D,KAAKuC,YAAYe,MAA+B,CAC9EU,2BAA2B,EAC3BC,yBAAyB,EACzBC,2BAA2B,IAE7BC,0BAA2BnE,KAAKuC,YAAYe,MAA+B,CACzEc,sBAAsB,EACtBC,sBAAsB,EACtBC,mBAAmB,EACnBC,qBAAqB,IAEvBC,iBAAiB,EACjBC,oBAAoB,EACpBC,eAAe,EACfC,cAAc,EACdC,WAAW,EACXC,gBAAgB,EAChBC,aAAa,EACbC,qBAAqB,IAGf,KAAApF,SAAW,IAAIC,EAAA,EA2LvB,KAAAoF,OAAS,IAAY,EAAD,gC,MAGlB,GAFAhF,KAAKqD,UAAU4B,mBAEXjF,KAAKqD,UAAU6B,QAQjB,YAPIlF,KAAKmF,WAAatD,EAAgBuD,MACpCpF,KAAKqC,qBAAqBgD,UACxB,QACA,KACArF,KAAKoC,YAAYkD,EAAE,8BAA+BtF,KAAKoC,YAAYkD,EAAE,WAM3E,IAAKtF,KAAKuF,yBAA2BvF,KAAKwF,uBAMxC,YALAxF,KAAKqC,qBAAqBgD,UACxB,QACA,KACArF,KAAKoC,YAAYkD,EAAE,6BAKvB,MAAMG,EAAW,IAAI,KAerB,GAdAA,EAASC,GAAK1F,KAAKkC,OAAOyD,mBAC1BF,EAASG,eAAiB5F,KAAKkC,OAAO0D,eACtCH,EAASI,UAAY7F,KAAK2D,qBAC1B8B,EAASjC,KAAOxD,KAAKqD,UAAUtE,MAAMyE,KACrCiC,EAASK,YAAc9F,KAAK+F,sBACN,QAApB,EAAAN,EAASK,mBAAW,QAAI,IAAI,IAC5BL,EAASjC,OAAS,YAEpBiC,EAASzC,YAAchD,KAAKqD,UAAUtE,MAAMgE,OACzC3B,QAAQ4E,GAAMA,EAAExC,OAAS,kBACzBtE,IAAI,MACPuG,EAAS5B,OAAS7D,KAAKqD,UAAUtE,MAAM8E,OAAO3E,KAAK+G,GAAMA,EAAEP,KAC3DD,EAAS7B,qBAAuB5D,KAAKqD,UAAUtE,MAAM6E,qBAEjD5D,KAAK6C,eACD7C,KAAK0C,YAAYwD,KAAKT,OACvB,CACLA,EAASC,GAAK1F,KAAKkC,OAAOyD,mBAC1B,MAAMpC,EAAS,IAAI,IAAI4C,IAAInG,KAAKqD,UAAUtE,MAAMwE,OAAOnE,OAAOH,MAAM,aACpE,GAAIsE,EAAO6C,OAAS,GAIlB,YAHApG,KAAKqD,UAAU9C,SAASgD,OAAO8C,UAAU,CACvCC,cAAe,CAAE9G,QAASQ,KAAKoC,YAAYkD,EAAE,gBAAiB,aAI5DtF,KAAK0C,YAAY6D,OAAOhD,EAAQkC,E,CAGxCzF,KAAKqC,qBAAqBgD,UACxB,UACA,KACArF,KAAKoC,YAAYkD,EAAEtF,KAAK6C,SAAW,eAAiB,eAAgB7C,KAAKkC,OAAOsE,OAElFxG,KAAKyG,MAAM3E,EAAmB4E,MAChC,IAEA,KAAAC,OAAS,IAAY,EAAD,gCAClB,IAAK3G,KAAK6C,SACR,OAGF,MAAMrD,EAAUQ,KAAKkC,OAAO0E,iBACxB,qCACA,4BAUJ,WATwB5G,KAAKqC,qBAAqBwE,WAChD7G,KAAKoC,YAAYkD,EAAE9F,GACnBQ,KAAKoC,YAAYkD,EAAE,qBAAsBtF,KAAKkC,OAAOsE,MACrDxG,KAAKoC,YAAYkD,EAAE,OACnBtF,KAAKoC,YAAYkD,EAAE,MACnB,WACA,EACA,qCAGA,OAAO,QAGHtF,KAAK2C,wBAAwBmE,uBACjC9G,KAAKkC,OAAO0D,eACZ5F,KAAKkC,OAAOyD,oBAGd3F,KAAKqC,qBAAqBgD,UACxB,UACA,KACArF,KAAKoC,YAAYkD,EAAE,gBAAiBtF,KAAKkC,OAAOsE,OAElDxG,KAAKyG,MAAM3E,EAAmBiF,QAChC,IAEA,KAAAC,OAAS,IAAY,EAAD,gCAClB,IAAKhH,KAAK6C,SACR,OAYF,WATwB7C,KAAKqC,qBAAqBwE,WAChD7G,KAAKoC,YAAYkD,EAAE,0BACnBtF,KAAKoC,YAAYkD,EAAE,eAAgBtF,KAAKkC,OAAOsE,MAC/CxG,KAAKoC,YAAYkD,EAAE,gBACnBtF,KAAKoC,YAAYkD,EAAE,UACnB,WACA,EACA,qCAGA,OAAO,QAGHtF,KAAK2C,wBAAwBsE,uBACjCjH,KAAKkC,OAAO0D,eACZ5F,KAAKkC,OAAOyD,oBAGd3F,KAAKqC,qBAAqBgD,UACxB,UACA,KACArF,KAAKoC,YAAYkD,EAAE,gBAAiBtF,KAAKkC,OAAOsE,OAElDxG,KAAK8C,WAAY,EACjB9C,KAAKyG,MAAM3E,EAAmBoF,QAChC,IAEA,KAAAC,QAAU,IAAY,EAAD,gCACdnH,KAAK6C,iBAIJ7C,KAAK2C,wBAAwByE,wBACjCpH,KAAKkC,OAAO0D,eACZ5F,KAAKkC,OAAOyD,oBAGd3F,KAAKqC,qBAAqBgD,UACxB,UACA,KACArF,KAAKoC,YAAYkD,EAAE,iBAAkBtF,KAAKkC,OAAOsE,OAEnDxG,KAAK8C,WAAY,EACjB9C,KAAKyG,MAAM3E,EAAmBuF,UAChC,GApTG,CApBC7B,6BACF,OAAOxF,KAAKqD,UAAUtE,MAAMyE,OAAS,UACvC,CAEIG,2BACF,OAAO3D,KAAKqD,UAAUtE,MAAM4E,oBAC9B,CAgBMtD,W,+CACJL,KAAK6C,SAA6C,MAAlC7C,KAAKkC,OAAOyD,mBAC5B3F,KAAKmF,SAAiC,QAAtB,EAAAnF,KAAKkC,OAAOoF,kBAAU,QAAIzF,EAAgBuD,KAC1DpF,KAAKuH,MAAQvH,KAAKoC,YAAYkD,EAAEtF,KAAK6C,SAAW,aAAe,gBAE/D,MAAM2E,GAAgB,EAAAC,EAAAA,IAAGzH,KAAKsC,oBAAoBoF,IAAI1H,KAAKkC,OAAO0D,iBAAiBlF,MACjF,EAAAiH,EAAA,GAAY,CAAEC,UAAU,EAAMC,WAAY,KAEtCC,EAAUN,EAAc9G,MAC5B,EAAAqH,EAAA,IAAWC,GACJA,EAAaC,UAIXjI,KAAKyC,aAAayF,OAAOlI,KAAKkC,OAAO0D,iBAHnC,EAAA6B,EAAAA,IAAG,QAOhB,EAAAU,EAAA,GAAc,CACZH,aAAcR,EACdxE,YAAahD,KAAKwC,uBAAuB0F,OAAOlI,KAAKkC,OAAO0D,gBAC5DwC,YAAapI,KAAKkC,OAAOyD,mBACrB3F,KAAK0C,YAAYgF,IAAI1H,KAAKkC,OAAO0D,eAAgB5F,KAAKkC,OAAOyD,qBAC7D,EAAA8B,EAAAA,IAAG,MACP5D,OAAQiE,IAEPpH,MAAK,EAAAC,EAAA,GAAUX,KAAKL,WACpBiB,WAAU,EAAGoH,eAAchF,cAAaoF,cAAavE,aAapD,GAZA7D,KAAKgI,aAAeA,EACpBhI,KAAKuF,wBAA0ByC,EAAaK,qBAC5CrI,KAAKsI,qBAAuBN,EAAaO,oBAAqB,QAAY,kBAE1EvI,KAAKmD,sBAAwB,GAAGqF,OAC9BxF,EAAY9D,KAAKuJ,GAAMC,GAA8BD,MAGvDzI,KAAKoD,iBAAmB,GAAGoF,OACzB3E,EAAO3E,KAAqByJ,IAAMC,OA6SVtF,EA7SmCqF,EA8S5D,CACLnF,KAAM,WACNkC,GAAIpC,EAAMoC,GACVmD,UAAWvF,EAAMkD,KACjBsC,SAAUxF,EAAMkD,MALpB,IAAkClD,CA7SqC,KAG3DtD,KAAKkC,OAAOyD,mBAAoB,CAClC,IAAKyC,EACH,MAAM,IAAIW,MAAM,gCAElB/I,KAAK8C,UAAYsF,EAAYY,SAAW,YACxC,MAAMC,EAAiC,CACrChF,wBAAyBmE,EAAYtC,YAAY7B,wBACjDC,0BAA2BkE,EAAYtC,YAAY5B,0BACnDF,0BACEoE,EAAYtC,YAAY7B,yBACxBmE,EAAYtC,YAAY5B,2BAEtBgF,EAA4B,CAChC7E,qBAAsB+D,EAAYtC,YAAYzB,qBAC9CC,kBAAmB8D,EAAYtC,YAAYxB,kBAC3CC,oBAAqB6D,EAAYtC,YAAYvB,oBAC7CH,qBACEgE,EAAYtC,YAAYzB,sBACxB+D,EAAYtC,YAAYxB,mBACxB8D,EAAYtC,YAAYvB,qBAExB6D,EAAY5E,OAAS,YACvBxD,KAAK8D,iBAAiBqF,WAAW,CAC/B3E,gBAAiB4D,EAAYtC,YAAYtB,gBACzCC,mBAAoB2D,EAAYtC,YAAYrB,mBAC5CC,cAAe0D,EAAYtC,YAAYpB,cACvCC,aAAcyD,EAAYtC,YAAYnB,aACtCC,UAAWwD,EAAYtC,YAAYlB,UACnCC,eAAgBuD,EAAYtC,YAAYjB,eACxCC,YAAasD,EAAYtC,YAAYhB,YACrCC,oBAAqBqD,EAAYtC,YAAYf,oBAC7ChB,+BAAgCkF,EAChC9E,0BAA2B+E,IAI/B,MAAME,EAAwBvF,EAC3BzC,QAAQkC,GAAU8E,EAAYvE,OAAOwF,SAAS/F,EAAMoC,MACpD4D,SAAShG,GACRA,EAAMN,YAAY9D,KAAKqK,IACrB,MAAMC,EAAaxG,EAAY3D,MAAMoJ,GAAMA,EAAE/C,KAAO6D,EAAgB7D,KACpE,MAAO,CAAEpC,QAAOkG,aAAYD,kBAAiB,MAInDvJ,KAAKmD,sBAAwBnD,KAAKmD,sBAAsBqF,OACtDY,EAAsBlK,KAAI,EAAGsK,aAAYD,kBAAiBjG,WACxDoF,GAA8Bc,EAAYD,EAAiBjG,MAI/D,MAAMmG,EAgQhB,SAA+BC,GAC7B,GAAY1K,MAAR0K,EACF,MAAO,GAET,MAAO,GAAGlB,OACRkB,EAAK1G,YAAY9D,KAAsByK,IAAc,CACnDjE,GAAIiE,EAAUjE,GACdlC,KAAM,gBACNoG,YAAY,QAAoBD,OAGtC,CA3QmCE,CAAsBzB,GACzC0B,EA4QhB,SAAoCjG,GAClC,GAAc7E,MAAV6E,EACF,MAAO,GAET,MAAO,GAAG2E,OACR3E,EAAO3E,KAAK6K,IAAY,CACtBrE,GAAIqE,EACJvG,KAAM,eAGZ,CAtRwCwG,CAA2B5B,EAAYvE,QAErE7D,KAAKqD,UAAU4G,cAAc,UAC7BjK,KAAKqD,UAAU8F,WAAW,CACxB3F,KAAM4E,EAAY5E,KAClBC,WAAY2E,EAAY3E,WACxBE,qBAAsByE,EAAYvC,UAClC9C,OAAQ0G,EACR7F,qBAAsBwE,EAAYxE,qBAClCC,OAAQiG,G,CAIZ9J,KAAK4C,SAAU,CAAK,G,IAI1BsH,MAAMzB,EAAmB0B,GACtB1B,EAAU2B,QAAoB,MAAVD,GAAmB1B,EAAU2B,QAAUD,EACtD1B,EAAU2B,UACd3B,EAAE4B,UAAW,EAEjB,CAEAC,UAAUH,GACRnK,KAAKgD,YAAYjC,SAAS0H,GAAMzI,KAAKkK,MAAMzB,EAAG0B,IAChD,CAEApE,sBAAsBwE,EAAmBC,GACvC,GAAIA,EACF,OAAO,IAAI,IAEb,MAAMC,EAA8C,CAClDjG,gBAAiBxE,KAAK8D,iBAAiB/E,MAAMyF,gBAC7CC,mBAAoBzE,KAAK8D,iBAAiB/E,MAAM0F,mBAChDC,cAAe1E,KAAK8D,iBAAiB/E,MAAM2F,cAC3CC,aAAc3E,KAAK8D,iBAAiB/E,MAAM4F,aAC1CC,UAAW5E,KAAK8D,iBAAiB/E,MAAM6F,UACvCC,eAAgB7E,KAAK8D,iBAAiB/E,MAAM8F,eAC5CC,YAAa9E,KAAK8D,iBAAiB/E,MAAM+F,YACzCC,oBAAqB/E,KAAK8D,iBAAiB/E,MAAMgG,oBACjDV,qBACErE,KAAK8D,iBAAiB/E,MAAMoF,0BAA0BE,qBACxDC,kBAAmBtE,KAAK8D,iBAAiB/E,MAAMoF,0BAA0BG,kBACzEC,oBACEvE,KAAK8D,iBAAiB/E,MAAMoF,0BAA0BI,oBACxDN,wBACEjE,KAAK8D,iBAAiB/E,MAAMgF,+BAA+BE,wBAC7DC,0BACElE,KAAK8D,iBAAiB/E,MAAMgF,+BAA+BG,2BAG/D,OAAOrD,OAAO6J,OAAOH,EAAGE,EAC1B,CAEA1I,6BAGI/B,KAAK8D,iBAAiB/E,MAAMgG,sBAC3B/E,KAAK8D,iBAAiB/E,MAAM+F,cAE7B9E,KAAK8D,iBAAiB/E,MAAM+F,aAAc,EACzC6F,SAASC,eAAe,eAAoCR,SAAU,EACvEpK,KAAKqC,qBAAqBgD,UACxB,OACA,KACArF,KAAKoC,YAAYkD,EAAE,6BAGzB,CAmJA9D,cACExB,KAAKL,SAAS8B,OACdzB,KAAKL,SAAS+B,UAChB,CAEgBmJ,S,yCACd7K,KAAKyG,MAAM3E,EAAmBgJ,SAChC,G,CAEQrE,MAAMsE,GACZ/K,KAAKmC,UAAUsE,MAAMsE,EACvB,EAGF,SAASrC,GACPc,EACAD,EACAjG,GAEA,MAAO,CACLE,KAAM,gBACNkC,GAAIpC,EAAQ,GAAGkG,EAAW9D,MAAMpC,EAAMoC,KAAO8D,EAAW9D,GACxDmD,UAAWW,EAAWhD,KACtBsC,SAAUU,EAAWhD,KACrBwE,cAAoBhM,IAAVsE,EACV2H,mBAAoB1B,GAAkB,QAAoBA,QAAmBvK,EAC7EkM,aAAc5H,aAAK,EAALA,EAAOkD,KAEzB,C,kCAxZaxE,IAAqB,MA2DtB,MAAW,2G,oBA3DVA,GAAqB,mmKC9DlC,kBACE,wCACE,oCACE,SACA,wBAGA,4CACF,0BACA,qCACE,sDAQA,2DAoTF,2BACA,qCACE,0CACE,U,iBACF,QACA,2CAKE,iCAAS,EAAA6I,QAAQ,IAGjB,U,iBACF,QACA,wCACE,oDAWA,oDAWA,oDAUF,6BACF,2BACF,yBACF,uBACA,gB,MA1XM,+BAAuB,sBACf,4CAER,8CACuD,iDAGjB,mCAGvB,iCAQC,kCAsTmD,qCACjE,4DAQA,qCAEA,8DAIG,+CAWA,gDAWA,kC,wKC/VJ,MAAMM,I,kCAAAA,GAAgB,E,oBAAhBA,K,wBAHD,KAA0B,Q,2HCX/B,MAAMC,I,mdCMH,oBAAuC,SAAU,S,qBAAV,sB,ECI1C,MAAMC,GAWXpJ,YACUqJ,EACAC,EACAC,GAFA,KAAAF,cAAAA,EACA,KAAAC,WAAAA,EACA,KAAAC,aAAAA,EAVA,KAAAC,gBAAkB,IAAI,MAEhC,KAAAC,cAAe,EACf,KAAA9I,SAAU,CAQP,CAEGvC,W,0CACJ,IACE,GAAsB,MAAlBL,KAAK2L,UAAmB,CAC1B,MAAMC,QAAoB5L,KAAKsL,cAAcO,eAC3C7L,KAAK8L,OACL9L,KAAK2L,UAAUI,QAEE,MAAfH,IACF5L,KAAK4L,YAAcA,EAAYI,KAAK,K,EAGxC,MAAOC,GACPjM,KAAKuL,WAAWW,MAAMD,E,CAExBjM,KAAK4C,SAAU,CACjB,G,CAEMoC,S,0CACAhF,KAAK4C,UAIL5C,KAAK0L,qBACD1L,KAAKwL,aAAaW,4BAA2B,IAGrDnM,KAAKyL,gBAAgBW,OACvB,G,oCA5CWf,IAAoB,sC,oBAApBA,GAAoB,mlC,GAAA,MDVjC,iBACE,iCACE,sCAAkC,oCAAY,EAAArG,QAAQ,IACpD,qCACE,sCACE,U,iBACA,2BACF,+BACA,4C,iBAME,4CAAyB,cAAO,QAClC,+BACF,6BACA,uCACE,qCACE,U,iBACA,iBACE,U,iBAAwB,QAE5B,+BACA,qCACE,0CAAM,UAAiB,QACzB,+BACA,0CACE,8CAKE,8DALF,QAOA,8CACE,U,iBACF,QACF,+BACF,6BACA,wCACE,6CACE,0C,iBACA,0CAAM,U,iBAAsB,QAC9B,+BACA,6CACE,U,iBACF,QACF,6BACF,2BACF,yBACF,uBACA,gB,sBAlD4D,6CAGlD,yEAC2B,8BAM3B,oDAOA,+FAEE,6DAII,8BAQJ,yCAGA,uFAKqD,qCACnB,+CAC9B,uCAGN,iE,+bEjBH,MAAeqH,GAoEpBpK,YACYqK,EACFC,EACEnK,EACAC,EACAiJ,EACAkB,EACAC,EACFlB,EACAmB,EACEC,EACAnB,GAVA,KAAAc,WAAAA,EACF,KAAAC,cAAAA,EACE,KAAAnK,YAAAA,EACA,KAAAC,qBAAAA,EACA,KAAAiJ,cAAAA,EACA,KAAAkB,kBAAAA,EACA,KAAAC,aAAAA,EACF,KAAAlB,WAAAA,EACA,KAAAmB,WAAAA,EACE,KAAAC,aAAAA,EACA,KAAAnB,aAAAA,EA3BZ,KAAA5I,SAAU,EACV,KAAAgK,UAAY,IAAIC,IAEhB,KAAAC,MAAoB,GACpB,KAAAC,WAAyB,GAIf,KAAAC,SAAuB,GACvB,KAAAC,YAA0B,GAE1B,KAAAC,WAAY,EACZ,KAAAC,SAAW,IAEb,KAAAC,gBAAkB,CAcvB,CA1ECC,eACF,OAA2B,MAApBrN,KAAKiN,YAAsBjN,KAAKiN,YAAY7G,OAAS,CAC9D,CAEIkH,mBACF,OAAOtN,KAAK4M,UAAUW,IAAIvN,KAAKwN,eAAeC,SAC1CzN,KAAK4M,UAAUlF,IAAI1H,KAAKwN,eAAeC,SAASrH,OAChD,CACN,CAEIsH,oBACF,OAAO1N,KAAK4M,UAAUW,IAAIvN,KAAKwN,eAAeG,UAC1C3N,KAAK4M,UAAUlF,IAAI1H,KAAKwN,eAAeG,UAAUvH,OACjD,CACN,CAEIwH,qBACF,OAAO5N,KAAK4M,UAAUW,IAAIvN,KAAKwN,eAAeK,WAC1C7N,KAAK4M,UAAUlF,IAAI1H,KAAKwN,eAAeK,WAAWzH,OAClD,CACN,CAEI0H,mBACF,OAAO9N,KAAK4M,UAAUW,IAAIvN,KAAKwN,eAAetG,SAC1ClH,KAAK4M,UAAUlF,IAAI1H,KAAKwN,eAAetG,SAASd,OAChD,CACN,CAEI2H,uBACF,OACsB,MAApB/N,KAAKiN,aACa,MAAlBjN,KAAK4M,WACL5M,KAAKiN,YAAY7G,OAAS,GAC1BpG,KAAK4N,eAAiB,GACtB5N,KAAK4N,eAAiB,GACtB5N,KAAK0N,cAAgB,CAEzB,CAEIM,2BACF,OAAOhO,KAAK0N,cAAgB,CAC9B,CA2CMO,O,0CACJ,MAAMC,QAAiBlO,KAAKmO,WAC5BnO,KAAK4M,UAAUwB,QACfpO,KAAKiN,YAAc,GACnB,IAAK,MAAMjE,KAAU,gBAAkBhJ,KAAKwN,gBAC1CxN,KAAK4M,UAAUyB,IAAIrF,EAAQ,IAGzBkF,aAAoB,GAAAI,EACtBtO,KAAKgN,SAA4B,MAAjBkB,EAASK,MAAgBL,EAASK,KAAKnI,OAAS,EAAI8H,EAASK,KAAO,GAC3EC,MAAMC,QAAQP,KACvBlO,KAAKgN,SAAWkB,GAGlBlO,KAAKgN,SAAS0B,KACZ,oBACE1O,KAAKoC,YACL,UAGJpC,KAAKgN,SAASjM,SAAS4N,IAChB3O,KAAK4M,UAAUW,IAAIoB,EAAE3F,QAGxBhJ,KAAK4M,UAAUlF,IAAIiH,EAAE3F,QAAQ4F,KAAKD,GAFlC3O,KAAK4M,UAAUyB,IAAIM,EAAE3F,OAAQ,CAAC2F,IAI5BA,EAAE3F,SAAWhJ,KAAKwN,eAAetG,SACnClH,KAAKiN,YAAY2B,KAAKD,E,IAG1B3O,KAAKoB,OAAOpB,KAAKgJ,QACjBhJ,KAAK4C,SAAU,CACjB,G,CAEAxB,OAAO4H,GACLhJ,KAAKgJ,OAASA,EACK,MAAfhJ,KAAKgJ,OACPhJ,KAAK8M,MAAQ9M,KAAK4M,UAAUlF,IAAI1H,KAAKgJ,QAErChJ,KAAK8M,MAAQ9M,KAAKiN,YAGpBjN,KAAKsK,WAAU,GACftK,KAAK6O,aACP,CAEAC,WACE,IAAK9O,KAAK8M,OAAS9M,KAAK8M,MAAM1G,QAAUpG,KAAKmN,SAC3C,OAEF,MAAM4B,EAAc/O,KAAK+M,WAAW3G,OACpC,IAAI4I,EAAYhP,KAAKmN,SACD,IAAhB4B,GAAqB/O,KAAKoN,gBAAkBpN,KAAKmN,WACnD6B,EAAYhP,KAAKoN,iBAEfpN,KAAK8M,MAAM1G,OAAS2I,IACtB/O,KAAK+M,WAAa/M,KAAK+M,WAAWvE,OAChCxI,KAAK8M,MAAMmC,MAAMF,EAAaA,EAAcC,KAGhDhP,KAAKoN,gBAAkBpN,KAAK+M,WAAW3G,OACvCpG,KAAKkN,UAAYlN,KAAK+M,WAAW3G,OAASpG,KAAKmN,QACjD,CAEA+B,UAAUxF,EAAgBS,GACvBT,EAAaU,QAAoB,MAAVD,GAAmBT,EAAaU,QAAUD,CACpE,CAEAG,UAAUH,GACJA,GACFnK,KAAKsK,WAAU,GAGjB,MAAM6E,EAAgBnP,KAAK0M,WAAW0C,UACpCpP,KAAK8M,MACL9M,KAAKqP,WACL,OACA,QACA,MAGIC,EACJnF,GAAUgF,EAAc/I,OA/KN,QA+KmD+I,EAAc/I,OACrF,IAAK,IAAImJ,EAAI,EAAGA,EAAID,EAAaC,IAC/BvP,KAAKkP,UAAUC,EAAcI,GAAIpF,EAErC,CAEM0E,c,0CACJ7O,KAAK+M,WAAa,GAClB/M,KAAK8O,UACP,G,CAEAvI,SACEvG,KAAKwP,KAAK,KACZ,CAEgBC,6BAA6B/F,G,0CAC3C,OAAO1J,KAAKqC,qBAAqBwE,WAC/B7G,KAAKoC,YAAYkD,EAAE,0BACnBtF,KAAK2M,aAAayC,UAAU1F,GAC5B1J,KAAKoC,YAAYkD,EAAE,OACnBtF,KAAKoC,YAAYkD,EAAE,MACnB,UAEJ,G,CAEMoK,OAAOhG,G,0CAEX,WADwB1J,KAAKyP,6BAA6B/F,IAExD,OAAO,EAGT1J,KAAK2P,cAAgB3P,KAAK4P,WAAWlG,EAAKhE,IAC1C,UACQ1F,KAAK2P,cACX3P,KAAKqC,qBAAqBgD,UACxB,UACA,KACArF,KAAKoC,YAAYkD,EAAE,gBAAiBtF,KAAK2M,aAAayC,UAAU1F,KAElE1J,KAAK6P,WAAWnG,E,CAChB,MAAOuC,GACPjM,KAAKwM,kBAAkBsD,UAAU7D,E,CAEnCjM,KAAK2P,cAAgB,IACvB,G,CAEM3I,OAAO0C,G,0CASX,WARwB1J,KAAKqC,qBAAqBwE,WAChD7G,KAAK+P,uBACL/P,KAAKoC,YAAYkD,EAAE,eAAgBtF,KAAK2M,aAAayC,UAAU1F,IAC/D1J,KAAKoC,YAAYkD,EAAE,gBACnBtF,KAAKoC,YAAYkD,EAAE,UACnB,YAIA,OAAO,EAGTtF,KAAK2P,cAAgB3P,KAAKgQ,WAAWtG,EAAKhE,IAC1C,UACQ1F,KAAK2P,cACX3P,KAAKqC,qBAAqBgD,UACxB,UACA,KACArF,KAAKoC,YAAYkD,EAAE,gBAAiBtF,KAAK2M,aAAayC,UAAU1F,WAE5D1J,KAAKiO,M,CACX,MAAOhC,GACPjM,KAAKwM,kBAAkBsD,UAAU7D,E,CAEnCjM,KAAK2P,cAAgB,IACvB,G,CAEMxI,QAAQuC,G,0CACZ1J,KAAK2P,cAAgB3P,KAAKiQ,YAAYvG,EAAKhE,IAC3C,UACQ1F,KAAK2P,cACX3P,KAAKqC,qBAAqBgD,UACxB,UACA,KACArF,KAAKoC,YAAYkD,EAAE,iBAAkBtF,KAAK2M,aAAayC,UAAU1F,WAE7D1J,KAAKiO,M,CACX,MAAOhC,GACPjM,KAAKwM,kBAAkBsD,UAAU7D,E,CAEnCjM,KAAK2P,cAAgB,IACvB,G,CAEMO,SAASxG,G,0CACb,GAA0B,MAAtB1J,KAAK2P,cAAT,CAIA3P,KAAK2P,cAAgB3P,KAAKmQ,aAAazG,EAAKhE,IAC5C,UACQ1F,KAAK2P,cACX3P,KAAKqC,qBAAqBgD,UACxB,UACA,KACArF,KAAKoC,YAAYkD,EAAE,mBAAoBtF,KAAK2M,aAAayC,UAAU1F,I,CAErE,MAAOuC,GACPjM,KAAKwM,kBAAkBsD,UAAU7D,E,CAEnCjM,KAAK2P,cAAgB,I,CACvB,G,CAEMS,QAAQ1G,G,0CAUZ,MAAM2G,EAAqB1E,GAA0B,mCACnD,IACE3L,KAAK2P,cAAgB3P,KAAKqQ,YAAY3G,EAAMiC,SACtC3L,KAAK2P,cAZf,SAAoBW,GAClB5G,EAAKV,OAASsH,EAAK9C,eAAeK,UAClC,MAAM0C,EAAWD,EAAK1D,UAAUlF,IAAI4I,EAAK9C,eAAeG,UAAU6C,QAAQ9G,GACtE6G,GAAY,IACdD,EAAK1D,UAAUlF,IAAI4I,EAAK9C,eAAeG,UAAU8C,OAAOF,EAAU,GAClED,EAAK1D,UAAUlF,IAAI4I,EAAK9C,eAAeK,WAAWe,KAAKlF,GAE3D,CAMIgH,CAAW1Q,MACXA,KAAKqC,qBAAqBgD,UACxB,UACA,KACArF,KAAKoC,YAAYkD,EAAE,mBAAoBtF,KAAK2M,aAAayC,UAAU1F,I,CAErE,MAAOuC,GAEP,MADAjM,KAAKwM,kBAAkBsD,UAAU7D,GAC3BA,C,SAENjM,KAAK2P,cAAgB,I,CAEzB,IAEA,GAA0B,MAAtB3P,KAAK2P,cAIT,IACE,MAAMgB,QAA0B3Q,KAAKsM,WAAWsE,iBAAiBlH,EAAKoC,QAChEH,EAAY,mBAAqBgF,EAAkBhF,WAEnDkF,QAAoB7Q,KAAKwL,aAAasF,6BAC5C,GAAmB,MAAfD,IAAwBA,EAAa,CACvC,MAAOE,SAAe/Q,KAAKyM,aAAauE,YACtC3F,GACArL,KAAKiR,iBACJC,IACCA,EAAK1K,KAAOxG,KAAK2M,aAAayC,UAAU1F,GACxCwH,EAAKpF,OAAiB,MAARpC,EAAeA,EAAKoC,OAAS,KAC3CoF,EAAKvF,UAAYA,EAEjBuF,EAAKzF,gBAAgB7K,WAAU,IAAY,mCACzC,IACEsQ,EAAKC,YAAcd,EAAY1E,SACzBuF,EAAKC,YACXJ,EAAMtK,O,CACN,MAAOwF,GACPjM,KAAKuL,WAAWW,MAAMD,E,CAE1B,KAAE,IAGN,M,CAGF,IACE,MAAML,QAAoB5L,KAAKsL,cAAcO,eAAenC,EAAKoC,OAAQH,EAAUI,QACnF/L,KAAKuL,WAAW6F,KAAK,uBAAuBxF,EAAYI,KAAK,O,CAC7D,MAAOC,GACPjM,KAAKuL,WAAWW,MAAMD,E,OAElBoE,EAAY1E,E,CAClB,MAAOM,GACPjM,KAAKuL,WAAWW,MAAM,sBAAsBD,I,CAEhD,G,CAEAoF,cACE,OAAOrR,KAAKuM,cAAc+E,aAAatR,KAAKqP,WAC9C,CAEAkC,WACE,MAAMC,EAAYxR,KAAKqR,cAIvB,OAHIG,GAAaxR,KAAKkN,WACpBlN,KAAK6O,eAEC2C,GAAaxR,KAAK8M,OAAS9M,KAAK8M,MAAM1G,OAASpG,KAAKmN,QAC9D,CAEU4C,uBACR,OAAO/P,KAAKoC,YAAYkD,EAAE,yBAC5B,CAEUmM,kBACR,OAAOzR,KAAK8M,MAAM1L,QAAQuN,GAAOA,EAAUvE,SAC7C,CAEUyF,WAAWnG,GACnB,IAAIpI,EAAQtB,KAAK8M,MAAM0D,QAAQ9G,GAC3BpI,GAAS,IACXtB,KAAK8M,MAAM2D,OAAOnP,EAAO,GACzBtB,KAAK6O,eAGPvN,EAAQtB,KAAKgN,SAASwD,QAAQ9G,GAC1BpI,GAAS,GACXtB,KAAKgN,SAASyD,OAAOnP,EAAO,GAG1BtB,KAAK4M,UAAUW,IAAI7D,EAAKV,UAC1B1H,EAAQtB,KAAK4M,UAAUlF,IAAIgC,EAAKV,QAAQwH,QAAQ9G,GAC5CpI,GAAS,GACXtB,KAAK4M,UAAUlF,IAAIgC,EAAKV,QAAQyH,OAAOnP,EAAO,GAGpD,E,kCAvYoB+K,IAAmB,oI,oBAAnBA,GAAmB,wB,GAAA,K,UAGD,O,6ECzBjC,MAAMqF,GAAb,cAcE,KAAA1O,YAA+C,GAC/C,KAAAa,OAAmB,GAEnB,KAAA8N,WAAuB,GACvB,KAAAC,gBAA4B,EAe9B,CAbEC,oBAAoB3D,GAClB,MAAM4D,EAAOjR,OAAO6J,OAAO,IAAIgH,GAAwBxD,GAUvD,OAR4BlP,MAAxBkP,EAASlL,cACX8O,EAAK9O,YAAckL,EAASlL,YAAY9D,KAAKuJ,GAAM,IAAI,KAA8BA,MAGhEzJ,MAAnBkP,EAASrK,SACXiO,EAAKjO,OAASqK,EAASrK,QAGlBiO,CACT,E,gBClCK,MAAMC,GAGX9P,YAAY+P,GACVhS,KAAKgS,KAAOA,CACd,E,0VCOM,kBACE,wC,gBACA,S,gBACF,S,MAFsC,6CACpC,iE,wBAEF,0BACE,S,gBACF,S,MADE,mF,2BAEF,0BACE,SACF,S,qBADE,mD,4BAsBM,oBAAoD,SAAe,S,+BAAf,sB,4BANxD,cACE,6CACE,uD,oBACF,oCACA,0CACE,SACA,4BACF,qCACA,4CACE,UACF,QACF,oC,oCATgB,oCAAwB,WAGpC,kEACmC,8BAGnC,gF,4BASA,oBAAoD,SAAe,S,+BAAf,sB,4BANxD,cACE,6CACE,uD,oBACF,oCACA,0CACE,SACA,4BACF,qCACA,4CACE,U,iBACF,QACF,oC,yBATgB,oCAAwB,WAGpC,kEACmC,8BAGnC,yF,4BAnCR,SACE,qCACE,S,gBACA,gBACE,S,gBAAwB,QAE5B,gCACA,6CACE,6CACE,4CACE,iDAAgB,U,iBAAmB,QACnC,8CAAI,U,iBAA0B,QAChC,qCACF,mCACA,qDAYA,qDAYF,iCACF,gC,qBArCI,gGAEE,6DAMkB,qCACZ,2CAGa,0CAYA,yC,4BA4BjB,oBAAoD,SAAe,S,+BAAf,sB,4BAEtD,cACE,SACF,S,0CADE,4E,yBAEF,cACE,S,gBACF,S,MADE,yF,2BAZJ,cACE,6CACE,uD,oBACF,oCACA,0CACE,SACA,4BACF,qCACA,sDAGA,sDAGF,oC,oCAZgB,oCAAwB,WAGpC,kEACmC,8BAEhC,4CAGA,4C,4BAnBX,SACE,4CACE,2CACE,0CACE,+CAAgB,S,iBAAmB,QACnC,8CAAI,U,iBAAqB,QAC3B,qCACF,mCACA,qDAeF,iCACF,gC,qBApBwB,mCACZ,qCAGa,yC,2CAmBzB,qBAKE,0DAAS,QAAAhN,SAAQ,IAEjB,wC,gBACA,wCAAM,S,gBAAsB,QAC9B,6B,yBALE,4BAGoC,6CAC9B,oC,ECtFT,MAAMiN,GAcXhQ,YACYqJ,EACAgB,EACF3J,EACAP,GAHE,KAAAkJ,cAAAA,EACA,KAAAgB,WAAAA,EACF,KAAA3J,wBAAAA,EACA,KAAAP,YAAAA,EAZV,KAAA8P,WAAsC,IAAIrF,IAC1C,KAAAsF,aAAoC,IAAItF,IACxC,KAAAuF,SAAgC,IAAIvF,IAEpC,KAAAjK,SAAU,EACV,KAAAyP,MAAO,CAQJ,CAEGhS,W,0CACJL,KAAKsS,cAAgBtS,KAAK8M,MAAM1L,QAAQuN,IAAO3O,KAAKuS,WAAW5D,KAC/D3O,KAAKmP,cAAgBnP,KAAK8M,MAAM1L,QAAQuN,GAAM3O,KAAKuS,WAAW5D,KAE1D3O,KAAKmP,cAAc/I,QAAU,IAC/BpG,KAAKqS,MAAO,GAGd,MAAMnE,QAAiBlO,KAAKwS,gBAE5B,IAAK,MAAMC,KAASvE,EAASK,KAAM,CACjC,MAAM5C,EAAY,mBAAqB8G,EAAMtS,KACvCyL,QAAoB5L,KAAKsL,cAAcO,eAAe4G,EAAM3G,OAAQH,EAAUI,QACjE,MAAfH,IACF5L,KAAKkS,WAAW7D,IAAIoE,EAAM/M,GAAIiG,GAC9B3L,KAAKmS,aAAa9D,IAAIoE,EAAM/M,GAAIkG,EAAYI,KAAK,M,CAIrDhM,KAAK4C,SAAU,CACjB,G,CAEMoC,S,0CACJhF,KAAK4C,SAAU,EACf,IACE,MAAMzC,QAAYH,KAAK0S,eACjBC,EAAyB,GAC/B,IAAK,MAAMjJ,KAAQ1J,KAAKmP,cAAe,CACrC,MAAMxD,EAAY3L,KAAKkS,WAAWxK,IAAIgC,EAAKhE,IAC3C,GAAiB,MAAbiG,EACF,SAEF,MAAMiH,QAAqB5S,KAAKsL,cAAcuH,WAAW1S,EAAIA,IAAKwL,EAAUI,QAC5E4G,EAAgB/D,KAAK,CACnBlJ,GAAIgE,EAAKhE,GACTvF,IAAKyS,EAAaE,iB,QAGC9S,KAAK+S,mBAAmBJ,IAEtCpE,KAAKxN,SAAS0R,IACrB,MAAMvG,EAAwB,KAAhBuG,EAAMvG,MAAeuG,EAAMvG,MAAQlM,KAAKoC,YAAYkD,EAAE,sBACpEtF,KAAKoS,SAAS/D,IAAIoE,EAAM/M,GAAIwG,EAAM,IAGpClM,KAAKqS,MAAO,C,CACZ,MAAOpG,GACPjM,KAAKkM,MAAQD,EAAEzM,O,CAEjBQ,KAAK4C,SAAU,CACjB,G,CAEU2P,WAAW7I,GACnB,OAAOA,EAAKV,SAAW,YACzB,CAEgBwJ,gB,0CACd,aAAaxS,KAAK2C,wBAAwBqQ,+BACxChT,KAAK4F,eACL5F,KAAKmP,cAAcjQ,KAAKwK,GAASA,EAAKhE,KAE1C,G,CAEUgN,eACR,OAAO1S,KAAKsL,cAAc2H,UAAUjT,KAAK4F,eAC3C,CAEgBmN,mBAAmBJ,G,0CACjC,MAAMO,EAAU,IAAInB,GAAmCY,GACvD,aAAa3S,KAAK2C,wBAAwBwQ,gCACxCnT,KAAK4F,eACLsN,EAEJ,G,oCA9FWjB,IAAoB,gD,oBAApBA,GAAoB,wuCDhBjC,iBACE,iCACE,mCACE,qCACE,sCACE,S,iBACF,QACA,4C,iBAME,4CAAyB,cAAO,QAClC,+BACF,6BACA,uCACE,gDAIA,wDAGA,yDAGA,4DAwCA,2DAyBF,6BACA,wCACE,oDAUA,6CACE,U,iBACF,QACF,6BACF,2BACF,yBACF,uBACA,gB,MA1GU,uEAMA,oDAMkC,kCAIR,iDAGD,+BAGZ,2CAwCA,0CA8BZ,+BAQD,iE,sYExFF,0BACE,S,gBACF,S,MADE,mF,2BAEF,0BACE,SACF,S,qBADE,mD,4BAGA,0BACE,SACF,S,sBADE,oE,4BAcI,oBAAoD,SAAe,S,+BAAf,sB,4BANxD,cACE,6CACE,uD,oBACF,oCACA,0CACE,SACA,4BACF,qCACF,oC,yBANgB,oCAAwB,WAGpC,kEACmC,6B,4BAhB3C,SACE,yDAGA,4CACE,2CACE,0CACE,gDAAgB,U,iBAAmB,QACrC,qCACF,mCACA,qDASF,iCACF,gC,qBAnB+B,kDAMP,mCAGC,iC,4BAyBjB,oBAAoD,SAAe,S,+BAAf,sB,4BAEtD,cACE,SACF,S,0CADE,4E,yBAEF,cACE,S,gBACF,S,MADE,yF,2BAZJ,cACE,6CACE,uD,oBACF,oCACA,0CACE,SACA,4BACF,qCACA,sDAGA,sDAGF,oC,oCAZgB,oCAAwB,WAGpC,kEACmC,8BAEhC,4CAGA,4C,4BAnBX,SACE,4CACE,2CACE,0CACE,+CAAgB,S,iBAAmB,QACnC,8CAAI,U,iBAAqB,QAC3B,qCACF,mCACA,qDAeF,iCACF,gC,qBApBwB,mCACZ,qCAGa,iC,2CAmBzB,qBAKE,0DAAS,QAAAjN,SAAQ,IAEjB,wC,gBACA,wCAAM,S,gBAA0B,QAClC,6B,yBALE,4BAGoC,6CAC9B,wC,ECnET,MAAMoO,GAUXnR,YACYqK,EACAlK,EACFO,GAFE,KAAA2J,WAAAA,EACA,KAAAlK,YAAAA,EACF,KAAAO,wBAAAA,EATV,KAAAyP,SAAgC,IAAIvF,IAEpC,KAAAjK,SAAU,EACV,KAAAyP,MAAO,CAOJ,CAEGrN,S,0CACJhF,KAAK4C,SAAU,EACf,WACyB5C,KAAKqT,eAEnB9E,KAAKxN,SAAS0R,IACrB,MAAMvG,EAAwB,KAAhBuG,EAAMvG,MAAeuG,EAAMvG,MAAQlM,KAAKoC,YAAYkD,EAAE,sBACpEtF,KAAKoS,SAAS/D,IAAIoE,EAAM/M,GAAIwG,EAAM,IAEpClM,KAAKqS,MAAO,C,CACZ,MAAOpG,GACPjM,KAAKkM,MAAQD,EAAEzM,O,CAGjBQ,KAAK4C,SAAU,CACjB,G,CAEgByQ,c,0CACd,aAAarT,KAAK2C,wBAAwB2Q,4BACxCtT,KAAK4F,eACL5F,KAAK8M,MAAM5N,KAAKwK,GAASA,EAAKhE,KAElC,G,CAEc6N,yBACZ,OAAOvT,KAAKoC,YAAYkD,EAAE,6BAC5B,E,kCA1CW8N,IAAmB,oC,oBAAnBA,GAAmB,gnCDZhC,iBACE,iCACE,mCACE,qCACE,sCACE,S,iBACF,QACA,4C,iBAME,4CAAyB,cAAO,QAClC,+BACF,6BACA,uCACE,wDAGA,wDAGA,2DAqBA,2DAyBF,6BACA,wCACE,oDAUA,6CACE,U,iBACF,QACF,6BACF,2BACF,yBACF,uBACA,gB,MAnFU,sEAMA,oDAM0B,0CAGD,+BAGZ,+BAqBA,8BA8BZ,iDAQD,iE,sYEjEF,0BACE,S,gBACF,S,MADE,mF,2BAEF,0BACE,SACF,S,qBADE,mD,yBAGA,0BACE,S,gBACF,S,MADE,gF,2BAcI,oBAAoD,SAAe,S,+BAAf,sB,4BANxD,cACE,6CACE,uD,oBACF,oCACA,0CACE,SACA,4BACF,qCACF,oC,yBANgB,oCAAwB,WAGpC,kEACmC,6B,4BAhB3C,SACE,yDAGA,4CACE,2CACE,0CACE,gDAAgB,U,iBAAmB,QACrC,qCACF,mCACA,qDASF,iCACF,gC,qBAnB+B,gEAMP,mCAGC,iC,4BAyBjB,oBAAoD,SAAe,S,+BAAf,sB,4BAEtD,cACE,SACF,S,0CADE,4E,yBAEF,cACE,S,gBACF,S,MADE,yF,2BAZJ,cACE,6CACE,uD,oBACF,oCACA,0CACE,SACA,4BACF,qCACA,sDAGA,sDAGF,oC,oCAZgB,oCAAwB,WAGpC,kEACmC,8BAEhC,4CAGA,4C,4BAnBX,SACE,4CACE,2CACE,0CACE,+CAAgB,S,iBAAmB,QACnC,8CAAI,U,iBAAqB,QAC3B,qCACF,mCACA,qDAeF,iCACF,gC,qBApBwB,mCACZ,qCAGa,iC,2CAmBzB,qBAKE,0DAAS,QAAApO,SAAQ,IAEjB,wC,gBACA,wCAAM,SAAe,QACvB,6B,yBALE,4BAGoC,6CAC9B,2B,ECnET,MAAMwO,GAWXvR,YACYG,EACFO,EACR8Q,GAFU,KAAArR,YAAAA,EACF,KAAAO,wBAAAA,EARV,KAAAyP,SAAgC,IAAIvF,IAEpC,KAAAjK,SAAU,EACV,KAAAyP,MAAO,EAQLrS,KAAK0T,WAAaD,EAAOlF,KAAKmF,WAC9B1T,KAAK4F,eAAiB6N,EAAOlF,KAAK3I,eAClC5F,KAAK8M,MAAQ2G,EAAOlF,KAAKzB,KAC3B,CAEI6G,gBACF,MAAMC,EAAW5T,KAAK0T,WAAa,cAAgB,eACnD,OAAO1T,KAAKoC,YAAYkD,EAAEsO,EAC5B,CAEM5O,S,0CACJhF,KAAK4C,SAAU,EACf,IACE,MAAMsL,QAAiBlO,KAAK6T,wBAEtBC,EAAc9T,KAAK0T,WAAa,qBAAuB,sBAC7DxF,EAASK,KAAKxN,SAAS0R,IACrB,MAAMvG,EAAwB,KAAhBuG,EAAMvG,MAAeuG,EAAMvG,MAAQlM,KAAKoC,YAAYkD,EAAEwO,GACpE9T,KAAKoS,SAAS/D,IAAIoE,EAAM/M,GAAIwG,EAAM,IAEpClM,KAAKqS,MAAO,C,CACZ,MAAOpG,GACPjM,KAAKkM,MAAQD,EAAEzM,O,CAGjBQ,KAAK4C,SAAU,CACjB,G,CAEgBiR,wB,0CACd,MAAME,EAAU/T,KAAK8M,MAAM5N,KAAKwK,GAASA,EAAKhE,KAC9C,OAAI1F,KAAK0T,iBACM1T,KAAK2C,wBAAwBqR,4BACxChU,KAAK4F,eACLmO,SAGW/T,KAAK2C,wBAAwBsR,6BACxCjU,KAAK4F,eACLmO,EAGN,G,yBCpDM,kBACE,wC,gBACA,S,gBACF,S,MAFsC,6CACpC,iE,2BAmBI,oBAAyD,SAAoB,S,+BAApB,2B,4BAE3D,iBACE,SACF,S,+BADE,6D,4BAEF,cACE,SACF,S,+BADE,6D,4BAhBJ,cACE,2CACE,qD,oBAKF,kCACA,wCACE,SACA,4BACF,mCACA,oDAGA,oDAGF,kC,yBAfM,yCAA6B,gBAM/B,mEACmC,mCAEZ,+BAGpB,+B,4BAtBT,oBACE,yCACE,wCACE,6CAAgB,S,gBAAmB,QACnC,2CAAI,U,iBAAqB,QAC3B,mCACF,iCACA,mDAmBF,gC,qBAvBsB,kCACZ,qCAGa,iC,oCDhBlBP,IAA0B,oC,oBAA1BA,GAA0B,ikCDZvC,iBACE,iCACE,mCACE,qCACE,sCACE,SACF,QACA,4C,iBAME,4CAAyB,cAAO,QAClC,+BACF,6BACA,uCACE,wDAGA,wDAGA,2DAqBA,2DAyBF,6BACA,wCACE,oDAUA,6CACE,U,iBACF,QACF,6BACF,2BACF,yBACF,uBACA,gB,MAnFU,wDAMA,mDAM0B,0CAGD,+BAGZ,+BAqBA,8BA8BZ,iDAQD,iE,oEG5DH,MAAMU,GAJb,cAME,KAAAtR,SAAU,C,oCAFCsR,GAAmB,E,oBAAnBA,GAAmB,i8BDtBhC,iBACE,iCACE,mCACE,qCACE,sCACE,S,iBACF,QACA,4C,iBAME,4CAAyB,cAAO,QAClC,+BACF,6BACA,uCACE,gDAIA,mDA2BF,6BACA,wCACE,6CACE,U,iBACF,QACF,6BACF,2BACF,yBACF,uBACA,gB,MApDU,4EAMA,mDAMkC,kCAIS,kCA8B3C,gE,0fE7CA,oBAAuC,SAAU,S,qBAAV,sB,4BAezC,0B,gBAMA,+B,qBAHE,sFADA,sD,gECQH,MAAMC,GAgBXlS,YACUG,EACAC,EACA+R,EACAC,EACA/I,EACAC,EACA5I,GANA,KAAAP,YAAAA,EACA,KAAAC,qBAAAA,EACA,KAAA+R,0BAAAA,EACA,KAAAC,cAAAA,EACA,KAAA/I,cAAAA,EACA,KAAAC,WAAAA,EACA,KAAA5I,wBAAAA,EAlBA,KAAA2R,gBAAkB,IAAI,MAIhC,KAAAC,YAAsB,KACtB,KAAAC,cAAe,EAIP,KAAA7U,SAAW,IAAIC,EAAA,CAUpB,CAEGS,W,0CACJL,KAAKqU,cACFI,+BACA/T,MAAK,EAAAC,EAAA,GAAUX,KAAKL,WACpBiB,WACE8T,GACE1U,KAAK2U,sBAAwBD,GAEtC,G,CAEAlT,cACExB,KAAKL,SAAS8B,OACdzB,KAAKL,SAAS+B,UAChB,CAEIkT,2BACF,OAAoB,MAAb5U,KAAKwG,KAAexG,KAAKwG,KAAOxG,KAAKoC,YAAYkD,EAAE,WAC5D,CAEMuP,mB,kDACJ,MAAMC,EAAkE,QAAvD,EAAkD,QAAnD,QAAO9U,KAAKoU,0BAA0BW,oBAAa,eAAG,UAAE,QAAI,CAAC,EAC7E/U,KAAKuU,kBAAoBvU,KAAKoU,0BAA0BS,iBAAiBC,GACzE9U,KAAKgV,0BAA0BC,uBAAuBjV,KAAKuU,Y,IAG7DW,iBACElV,KAAKwU,cAAgBxU,KAAKwU,aAC1B7J,SAASC,eAAe,eAAeuK,OACzC,CAEAC,KAAKrW,GACU,MAATA,IAIJiB,KAAKqC,qBAAqBgT,gBAAgBtW,EAAO,CAAEuW,SACnDtV,KAAKqC,qBAAqBgD,UACxB,OACA,KACArF,KAAKoC,YAAYkD,EAAE,cAAetF,KAAKoC,YAAYkD,EAAE,cAEzD,CAEMN,S,0CAEJ,GAAwB,MAApBhF,KAAKuU,aAA4C,KAArBvU,KAAKuU,YAMnC,OALAvU,KAAKqC,qBAAqBgD,UACxB,QACArF,KAAKoC,YAAYkD,EAAE,iBACnBtF,KAAKoC,YAAYkD,EAAE,4BAEd,EAGT,GAAItF,KAAKuU,YAAYnO,OAAS,0BAM5B,OALApG,KAAKqC,qBAAqBgD,UACxB,QACArF,KAAKoC,YAAYkD,EAAE,iBACnBtF,KAAKoC,YAAYkD,EAAE,0BAA2B,6BAEzC,EAGT,GACgC,MAA9BtF,KAAK2U,uBACJ3U,KAAKqU,cAAckB,uBAClBvV,KAAKwV,uBAAuBC,MAC5BzV,KAAKuU,YACLvU,KAAK2U,uBALT,CAgBA,GAAI3U,KAAKwV,uBAAuBC,MAAQ,EAAG,CAQzC,WAPqBzV,KAAKqC,qBAAqBwE,WAC7C7G,KAAKoC,YAAYkD,EAAE,0BACnBtF,KAAKoC,YAAYkD,EAAE,sBACnBtF,KAAKoC,YAAYkD,EAAE,OACnBtF,KAAKoC,YAAYkD,EAAE,MACnB,YAGA,OAAO,C,CAKX,IACEtF,KAAKmR,YAAcnR,KAAK2C,wBACrB+S,wCAAwC1V,KAAK4F,eAAgB5F,KAAK0F,IAClEiQ,MAAYzH,GAAa,mCACxB,GAAgB,MAAZA,EACF,MAAM,IAAInF,MAAM/I,KAAKoC,YAAYkD,EAAE,8BAGrC,MAAMsQ,EAAU1H,EAAS2H,IACnBC,EAAgB5H,EAAS4H,cACzBC,EAAY7H,EAAS6H,UACrBC,EAAiB9H,EAAS8H,eAC1BC,EAAmB/H,EAAS+H,iBAC5BC,EAAsBhI,EAASgI,oBAG/BC,QAAkBnW,KAAKsL,cAAc2H,UAAUjT,KAAK4F,gBACpDwQ,QAAsBpW,KAAKsL,cAAc+K,eAC7C,IAAI,KAAUH,GACdC,GAIIG,QAAiBtW,KAAKsL,cAAciL,WAAWN,EAAkBG,GACjEI,EAAa,IAAI,KAAmBF,GAGpCG,QAAezW,KAAKsL,cAAcoL,QACtC1W,KAAKuU,YACLvU,KAAKb,MAAMC,OAAOuX,cAClBf,EACA,IAAI,KAAUE,EAAeC,EAAWC,IAEpCY,QAAwB5W,KAAKsL,cAAcuL,aAAa7W,KAAKuU,YAAakC,GAG1EK,QAAkB9W,KAAKsL,cAAcyL,aAAaN,EAAQD,GAG1DtD,EAAU,IAAI,KAKpB,OAJAA,EAAQ/S,IAAM2W,EAAU,GAAGhE,gBAC3BI,EAAQ8D,sBAAwBJ,EAGzB5W,KAAK2C,wBAAwBsU,iCAClCjX,KAAK4F,eACL5F,KAAK0F,GACLwN,EAEJ,YAEIlT,KAAKmR,YACXnR,KAAKqC,qBAAqBgD,UACxB,UACA,KACArF,KAAKoC,YAAYkD,EAAE,yBAErBtF,KAAKsU,gBAAgBlI,M,CACrB,MAAOH,GACPjM,KAAKuL,WAAWW,MAAMD,E,OAjFtBjM,KAAKqC,qBAAqBgD,UACxB,QACArF,KAAKoC,YAAYkD,EAAE,iBACnBtF,KAAKoC,YAAYkD,EAAE,0CAgFzB,G,CAEA4R,kBAAkBnM,GAChB/K,KAAKwV,uBAAyBzK,CAChC,E,kCAxLWoJ,IAAsB,oF,oBAAtBA,GAAsB,2D,GAAA,K,KAMtB,KAAyB,G,gvDDrCtC,iBACE,iCACE,sCAAkC,oCAAY,EAAAnP,QAAQ,IACpD,qCACE,sCACE,U,iBACA,2BACF,+BACA,4C,iBAME,4CAAyB,cAAO,QAClC,+BACF,6BACA,uCACE,kDACG,U,iBACH,QACA,yDAOA,0CACE,4CACE,8CACE,kDAAyB,U,iBAA0B,QACnD,gDACE,gDAKE,iCAAS,EAAA6P,kBAAkB,I,iBAE3B,kDACF,uCACF,qCACF,mCACA,8CACE,kDAME,6DANF,QAWA,gDACE,qDAIE,iCAAS,EAAAK,gBAAgB,I,iBAEzB,kDAKF,uCACA,qDAIE,iCAAS,EAAAE,KAAA,cAAiB,I,iBAE1B,kDACF,uCACF,qCACF,mCACA,gEAIE,mDAA0B,EAAA8B,kBAAA,EAAyB,IAErD,mCACF,iCACF,+BACF,6BACA,wCACE,6CACE,0C,iBACA,0CAAM,U,iBAAmB,QAC3B,+BACA,6CACE,U,iBACF,QACF,6BACF,2BACF,yBACF,uBACA,gB,sBAnG4D,6CAGlD,2EAC2B,8BAM3B,oDAOC,qGAMA,+CAM4B,2CAMrB,+DAYF,yDAEA,+BASE,+DAME,sEAMF,2DAQJ,yCAAwB,gBAAxB,CAAwB,eAU2B,qCACnB,+CAC9B,oCAGN,iE,4SE7FV,IAAIC,GAAS,EAON,MAAMC,GALb,cAMU,KAAA1R,GAAKyR,KACb,KAAA3Q,KAAO,oBAAoBxG,KAAK0F,KAGtB,KAAA2R,eAAiB,IAAI,MAEL,KAAAC,KAAO,aACX,KAAAC,UAAY,CAAC,U,CAEnCC,mBAAmBzY,GACjBiB,KAAKyX,SAAW1Y,EAChBiB,KAAKqX,eAAejL,KAAKrN,EAC3B,E,kCAbWqY,GAAoB,E,oBAApBA,GAAoB,6E,8LCTjC,S,oBCIA,IAAI,GAAS,EAON,MAAMM,GAKXzV,YAAoB0V,GAAA,KAAAA,eAAAA,EAJpB,KAAAjS,GAAK,KAMoB,KAAAP,SAAW,KACd,KAAAoS,UAAY,CAAC,WAHgC,CAK/D/Q,WACF,OAAOxG,KAAK2X,eAAenR,IAC7B,CAEIiR,eACF,OAAOzX,KAAK2X,eAAeF,WAAazX,KAAKjB,KAC/C,CAEI6Y,mBACF,MAAO,CAAC,UAAW,qBAAsB,kBAC3C,CAEIC,mBACF,MAAO,CACL,oBACA,gBACA,iBACA,uBACA,iBACA,kBACA,cACA,cACA,gBACA,oBACA,kCACA,mCACA,kCAEA,6BACA,qBACA,8BACA,iCACA,qBACA,+BACA,mCACA,+BAEA,wBACA,yBACA,6BACA,0BAEA,iCACA,qCACA,iCACA,YACA,UAGA,WAIA,6BACA,4BAEJ,CAEAL,qBACExX,KAAK2X,eAAeH,mBAAmBxX,KAAKjB,MAC9C,E,kCAtEW2Y,IAAe,Y,oBAAfA,GAAe,uE,+OCX5B,mBAME,kCAAU,EAAAF,oBAAoB,IANhC,QAQA,mBACE,SACF,S,MARE,2BAAA9R,GAAA,IACA,qBAAa,yBAAb,CAAa,sBAKR,4CAA0B,gC,wCCLjC,IAAI,GAAS,EAaN,MAAMoS,GAXb,cAeY,KAAApS,GAAK,aAAa,I,CAM5BqS,SAAS1I,GACoBrQ,MAAvBgB,KAAKgY,gBACPhY,KAAKgY,eAAe3I,EAExB,CAEA4I,UAC4BjZ,MAAtBgB,KAAKkY,eACPlY,KAAKkY,eAET,CAEAC,iBAAiBC,GACfpY,KAAKgY,eAAiBI,CACxB,CAEAC,kBAAkBD,GAChBpY,KAAKkY,cAAgBE,CACvB,CAEAE,WAAWjJ,GACTrP,KAAKqP,WAAaA,CACpB,CAEAkJ,iBAAiBC,GACfxY,KAAK0D,SAAW8U,CAClB,E,kCApCWV,GAAoB,E,oBAApBA,GAAoB,wGARpB,CACT,CACEW,QAAS,KACTC,OAAO,EACPC,YAAab,OAEhB,qY,GAAA,MCdH,mBAAqC,S,gBAAqB,QAC1D,+BACE,mCAKE,iCACF,wBACA,qCAOE,0CAAiB,EAAAC,SAAA,EAAgB,GAAjC,CAAkC,0BAC1B,EAAAE,SAAS,I,iBARnB,QAWF,uBACA,gB,WArB0B,kBAAW,oCAGjC,2BASA,0BAAS,0EAAT,CAAS,uBAAT,CAAS,sB,ikBCAgB,mBAAiD,SAAc,S,qBAAd,0B,4BAKpE,mBAAqD,SAAkB,S,qBAAlB,8B,4BAKrD,mBAAsD,SAAmB,S,qBAAnB,+B,4BAKtD,mBAAqD,SAAkB,S,qBAAlB,8B,yBAiB7D,SACE,kC,gBAKA,qCAAsB,S,gBAAsB,QAC9C,yB,MAJI,6CAGoB,qC,wBAQtB,aAAiC,S,gBAA8B,S,MAA9B,6C,wBAE/B,0B,gBAME,S,gBACF,S,MALE,yCAIA,wE,0CAwCQ,qBAGE,2DAAS,QAAAW,cAAa,IAGtB,mDACE,kDACA,S,gBACF,QACF,qC,OAFI,6F,wBAwCA,mBAKG,S,gBAAsB,S,MAAtB,qC,wBAEH,mBAKG,S,gBAAgC,S,MAAhC,+C,wBAEH,mBAKG,S,gBAAsB,S,MAAtB,qC,2BAGL,kBACE,SACF,S,+BADE,uE,2BAWN,6B,0CAEE,uEAAmE,a,yBAIrE,gBAAqD,S,gBAAkB,S,MAAlB,iC,wBAYrD,SACE,8C,gBAKA,iDAAyB,S,gBAA+B,QAC1D,qC,MAJI,sDAGuB,8C,wBAE3B,SACE,8C,gBAKA,iDAAyB,S,gBAAoC,QAC/D,qC,MAJI,2DAGuB,mD,0CAazB,qBAGE,+EAAS,QAAA1I,SAAA,GAAW,IAGpB,gDACA,S,gBACF,O,OADE,0F,0CAEF,qBAGE,+EAAS,QAAAE,QAAA,GAAU,IAGnB,mDACE,kDAAiD,S,gBACnD,QACF,qC,OAFqD,gE,uBAGrD,2B,0CAQA,qBAGE,+EAAS,QAAAZ,KAAA,sBAAyB,IAGlC,gDAAiD,S,gBACnD,O,OADmD,6D,0CAMnD,qBAGE,+EAAS,QAAAqJ,OAAA,GAAS,IAGlB,gDAAqD,S,gBACvD,O,OADuD,gE,0CAEvD,qBAGE,+EAAS,QAAAC,cAAA,GAAgB,IAGzB,gDAA+C,S,gBACjD,O,OADiD,oE,0CAEjD,qBAGE,+EAAS,QAAA3R,QAAA,GAAU,IAGnB,gDACA,S,gBACF,O,OADE,uF,0CAEF,qBAGE,+EAAS,QAAAH,OAAA,GAAS,IAGlB,gDACA,S,gBACF,O,OADE,sF,0CAxKR,iBACE,2CAAY,uEAAS,QAAAkI,UAAA,GAAY,IAC/B,gDAAmC,qEAAa,kBAC3D,IADW,QACF,kCACA,2CAAY,uEAAS,QAAAM,KAAA,GAAO,IAC1B,8CACE,yD,qBAOA,kDACE,iDACE,yDACE,UACF,QACA,8DAOA,8DAOA,8DAOF,yCACA,2DAGF,uCACF,qCACF,mCAEA,+CAEE,uEAAS,QAAAA,KAAA,uEAA0E,IAGnF,kEAMA,uDACF,mCAEA,+CAEE,uEAAS,QAAAA,KAAA,oBAAuB,IAGhC,U,qBACF,QAEA,+CACE,+DAQA,+DAQF,mCACA,6CACE,mD,iBAQA,4DACE,4DASA,4DAUA,qEAKA,qDAAkC,uEAAS,QAAAA,KAAA,oBAAuB,IAChE,kDAAgD,U,iBAClD,QACA,4DAQA,qDAAkC,uEAAS,QAAAA,KAAA,2BAA8B,IACvE,kDAAsD,U,iBACxD,QACA,4DACA,4DAQA,4DAQA,4DASA,4DASA,qDAAkC,uEAAS,QAAAE,OAAA,GAAS,IAClD,qDACE,oDAAiD,U,iBACnD,QACF,uCACF,qCACF,mCACF,gC,0DA/KuC,oCAM/B,sCAAqB,cAArB,CAAqB,uBAQjB,4GAMC,2DAOA,4DAOA,2DAIkC,8BAaxC,8DAKI,8DAQP,wEAIe,0CAQA,+CAeb,sDAJA,6BAYG,2DASA,4DAOA,iGAK+C,mEAM/C,gDAKqD,oEAOrD,uFAQA,+CAQA,2DASA,2DAOkD,gE,4BA5K3D,mDAkLF,uB,2BAlL2B,2B,2CA7E/B,SACE,qDAQA,4CAIE,8DAAY,QAAAZ,WAAU,IAEtB,kCACE,sCACE,4CACE,kDAIE,6DAAU,QAAAxE,UAAA,kBAAsC,IAJlD,QAOA,kDAAoE,U,iBAElE,QACJ,mCACA,6CAAY,U,iBAAmB,QAC/B,6CAAY,U,iBAAgE,QAC5E,6CAAY,U,iBAAmB,QAC/B,6CAAY,U,iBAAuB,QACnC,6CACE,mD,iBAQA,4DACE,qDAAkC,2DAAS,QAAAyO,eAAc,IACvD,kDACA,U,iBACF,QACA,4DAWA,qDAAkC,2DAAS,QAAAC,cAAa,IACtD,kDACA,U,iBACF,QACA,qDAAkC,2DAAS,QAAAC,aAAY,IACrD,kDACA,U,iBACF,QACA,qDAAkC,2DAAS,QAAAC,aAAY,IACrD,qDACE,oDACA,U,iBACF,QACF,uCACF,qCACF,mCACF,iCACF,+BACA,yDAoLF,6BACF,0B,sCA5PK,0CAMD,2CAA4B,wCAc8C,oCAI1D,oCACA,6EACA,oCACA,wCAOR,sDAJA,6BAUE,4FAMC,8CASD,yFAIA,wFAKE,qF,4BA5ElB,SAME,wCACA,qDAkQF,yB,oBAnQM,iCACW,+B,0MCgBZ,MAAMC,WACH9M,GA4BRpK,YACEqK,EACQ8M,EACRhX,EACAqK,EACApK,EACAiJ,EACAiB,EACAC,EACQ6H,EACAgF,EACR9N,EACAmB,EACAC,EACQ2M,EACR9N,EACQlJ,EACAiX,EACA5W,EACA6W,EACAC,EACAhX,EACAiX,GAERC,MACErN,EACAC,EACAnK,EACAC,EACAiJ,EACAkB,EACAC,EACAlB,EACAmB,EACAC,EACAnB,GAjCM,KAAA4N,MAAAA,EAOA,KAAA/E,cAAAA,EACA,KAAAgF,iBAAAA,EAIA,KAAAC,YAAAA,EAEA,KAAAhX,oBAAAA,EACA,KAAAiX,uBAAAA,EACA,KAAA5W,wBAAAA,EACA,KAAA6W,cAAAA,EACA,KAAAC,OAAAA,EACA,KAAAhX,aAAAA,EACA,KAAAiX,kBAAAA,EAhCV,KAAAE,SAAW,IACX,KAAApM,eAAiB,IACjB,KAAAqM,UAAYhY,EAGZ,KAAAmH,OAAqC,KACrC,KAAA8Q,+BAAgC,EAExB,KAAAna,SAAW,IAAIC,EAAA,CAuCvB,CAEMS,W,0CACJ,MAAMmH,EAAgBxH,KAAKoZ,MAAMlX,OAAOxB,MACtC,EAAAxB,GAAA,IAAKgD,GAAWlC,KAAKsC,oBAAoBoF,IAAIxF,EAAO0D,mBACpD,EAAA+B,EAAA,GAAY,CAAEC,UAAU,EAAMC,WAAY,KAGtCkS,EAAYvS,EAAc9G,MAC9B,EAAAqH,EAAA,IAAWC,GACLA,EAAagS,gBACR,EAAAC,GAAA,GAAKja,KAAKqZ,iBAAiBa,YAAYlS,EAAatC,KAAKhF,MAC9D,EAAAxB,GAAA,IAAKgP,GAAalO,KAAKqU,cAAc8F,qBAAqBjM,MAIvDlO,KAAKqU,cAAc0F,cAI9B,EAAA5R,EAAA,GAAc,CAACnI,KAAKoZ,MAAMgB,YAAaL,EAAWvS,IAC/C9G,MACC,EAAA2Z,GAAA,IAAU,EAAQC,EAASC,EAAUvS,KAAkB,mCAIrD,GAHAhI,KAAKgI,aAAeA,EAIlBhI,KAAKgI,aAAawS,yBACjBxa,KAAKgI,aAAayS,wBACnB,CACA,MAAMC,QAAoB1a,KAAKsL,cAAc2H,UAAUjT,KAAKgI,aAAatC,IACnEiV,QAAgB3a,KAAKsL,cAAcsP,YAAYF,GAC/CxH,EAAU,IAAI,KAAwByH,EAAQ,GAAIA,EAAQ,GAAG7H,iBAC7D5E,QAAiBlO,KAAKuZ,uBAAuBsB,WACjD7a,KAAKgI,aAAatC,GAClBwN,GAEF,GAAgB,MAAZhF,EAKF,MAAM,IAAInF,MAAM/I,KAAKoC,YAAYkD,EAAE,8BAJnCtF,KAAKgI,aAAayS,wBACM,MAAtBvM,EAASvC,WAA4C,MAAvBuC,EAAS4M,iBACnC9a,KAAKsZ,YAAYyB,UAAS,E,CAMpC,MAAMC,EAAsBT,EACzBnZ,QAAQ6Z,GAAWA,EAAOzX,OAAS,qBACnCnE,MAAMkL,GAAMA,EAAE3E,iBAAmB5F,KAAKgI,aAAatC,KAMtD,GALA1F,KAAK8Z,8BAAgCkB,aAAmB,EAAnBA,EAAqBE,cAEpDlb,KAAKiO,OAEXjO,KAAKqP,WAAaiL,EAAQa,OACA,MAAtBb,EAAQc,WAAoB,CAC9B,MAAM1R,EAAO1J,KAAK8M,MAAM1L,QAAQuN,GAAMA,EAAEjJ,KAAO4U,EAAQc,aACnD1R,EAAKtD,OAAS,GAAKsD,EAAK,GAAGV,SAAW,eACxChJ,KAAK6Y,OAAOnP,EAAK,G,CAGvB,OACA,EAAA/I,EAAA,GAAUX,KAAKL,WAEhBiB,WACL,G,CAEAY,cACExB,KAAKL,SAAS8B,OACdzB,KAAKL,SAAS+B,UAChB,CAEMuM,O,wGACE,EAAMA,KAAI,UAClB,G,CAEME,W,gDACJ,IAAIkN,EACAC,EAGJ,MAAMC,EAAcvb,KAAK2C,wBAAwB6Y,YAAYxb,KAAKgI,aAAatC,GAAI,CACjF+V,cAAezb,KAAKgI,aAAaC,UACjCyT,oBAAqB1b,KAAKgI,aAAaC,YAIrCjI,KAAKgI,aAAaC,UACpBoT,EAAgBrb,KAAK2b,kBAErBL,EAAqBtb,KAAK4b,uBAG5B,MAAOC,EAAeC,EAAeC,SAA4BC,QAAQC,IAAI,CAC3EV,EACAF,EACAC,IAGF,OAAyB,QAAlB,EAAAO,EAActN,YAAI,eAAErP,KAA2Bgd,I,QACpD,MAAMzW,EAAWiM,GAAqByK,aAAaD,GASnD,OAPAzW,EAASkM,WAAalM,EAAS5B,OAC5B3E,KAAKyJ,GAAMmT,EAAcpU,IAAIiB,KAC7B+F,KAA8B,QAAzB,EAAA1O,KAAKoC,YAAYga,gBAAQ,eAAEC,SACnC5W,EAASmM,gBAAkBnM,EAASzC,YACjC9D,KAAKuJ,GAAMsT,EAAmBrU,IAAIe,EAAE/C,MACpCgJ,KAA8B,QAAzB,EAAA1O,KAAKoC,YAAYga,gBAAQ,eAAEC,SAE5B5W,CAAQ,G,IAIbkW,kB,0CACJ,MAAM9X,QAAe7D,KAAKyC,aAAayF,OAAOlI,KAAKgI,aAAatC,IAC1D4W,EAAe,IAAIzP,IAEzB,OADAhJ,EAAO9C,SAAS4H,GAAM2T,EAAajO,IAAI1F,EAAEjD,GAAIiD,EAAEnC,QACxC8V,CACT,G,CAKMV,uB,0CACJ,MAAMW,EAAgB,IAAI1P,IAGpB7J,SAFiBhD,KAAKsM,WAAWkQ,eAAexc,KAAKgI,aAAatC,KAE3C6I,KAAKrP,KAC/Bgd,GAAM,IAAI,KAAW,IAAI,KAAeA,MAM3C,aAJmClc,KAAK0Z,kBAAkB+C,YAAYzZ,IAEjDjC,SAAS0H,GAAM8T,EAAclO,IAAI5F,EAAE/C,GAAI+C,EAAEjC,QAEvD+V,CACT,G,CAEA3M,WAAWlK,GACT,OAAO1F,KAAK2C,wBAAwBmE,uBAAuB9G,KAAKgI,aAAatC,GAAIA,EACnF,CAEAsK,WAAWtK,GACT,OAAO1F,KAAK2C,wBAAwBsE,uBAAuBjH,KAAKgI,aAAatC,GAAIA,EACnF,CAEAuK,YAAYvK,GACV,OAAO1F,KAAK2C,wBAAwByE,wBAAwBpH,KAAKgI,aAAatC,GAAIA,EACpF,CAEAyK,aAAazK,GACX,OAAO1F,KAAK2C,wBAAwB+Z,6BAA6B1c,KAAKgI,aAAatC,GAAIA,EACzF,CAEM2K,YAAY3G,EAA4BiC,G,0CAC5C,MAAMgR,QAAe3c,KAAKsL,cAAc2H,UAAUjT,KAAKgI,aAAatC,IAC9DvF,QAAYH,KAAKsL,cAAcuH,WAAW8J,EAAOxc,IAAKwL,EAAUI,QAChEmH,EAAU,IAAI9H,GACpB8H,EAAQ/S,IAAMA,EAAI2S,sBACZ9S,KAAK2C,wBAAwBia,4BACjC5c,KAAKgI,aAAatC,GAClBgE,EAAKhE,GACLwN,EAEJ,G,CAEA2J,mBAAmBC,GAEjB,IAAIC,GAA2B,EAE/B,OAAQ/c,KAAKgI,aAAaxE,MACxB,KAAK,UACHuZ,GAA2B,EAC3B,MACF,KAAK,UACHA,EAA2BD,EAAQtZ,OAAS,UAC5C,MACF,KAAK,WACHuZ,EACED,EAAQtZ,OAAS,WACjBsZ,EAAQtZ,OAAS,UAKvB,OACExD,KAAKgI,aAAawS,wBAClBuC,GACA/c,KAAKgI,aAAagV,kBAClBhd,KAAKgI,aAAayS,yBAClBqC,EAAQG,uBACRjd,KAAK8Z,+BACLgD,EAAQ9T,SAAW,aAEvB,CAEAkU,mBAAmBJ,GACjB,OACE9c,KAAKgI,aAAagV,kBAClBF,EAAQG,uBACRjd,KAAK8Z,6BAET,CAEcqD,2B,0CACZ,MAAMC,EAAkD,CACtD7V,MAAOvH,KAAKoC,YAAYkD,EAAE,uBAC1B+X,QAASrd,KAAKoC,YAAYkD,EACxBtF,KAAKgI,aAAasV,iBACd,sCACA,wCACJtd,KAAKgI,aAAauV,OAEpB/Z,KAAM,cAGJxD,KAAKgI,aAAasV,iBACpBF,EAA2BI,iBAAmBxd,KAAKoC,YAAYkD,EAAE,YAEjE8X,EAA2BI,iBAAmBxd,KAAKoC,YAAYkD,EAAE,MACjE8X,EAA2BK,iBAAmB,MAGhD,MAAMC,EAAe1d,KAAKwZ,cAAcmE,iBAAiBP,IAEzD,EAAAQ,GAAA,GAAeF,EAAaG,QAAQlI,MAAM5K,IACnCA,GAIDA,GAAU,aAAgC/K,KAAKgI,aAAasV,kBAC9Dtd,KAAKyZ,OAAOqE,SAAS,CAAC,iBAAkB9d,KAAKgI,aAAatC,GAAI,UAAW,gBAAiB,CACxF0U,YAAa,CAAE2D,SAAS,I,GAIhC,G,CAEMvO,KAAK9F,EAA4BpC,EAA8BzF,EAAgBuD,M,0CAKnF,IACGsE,GACD1J,KAAKgI,aAAagW,kBAAoB,WACtChe,KAAKgN,SAAS5G,SAAWpG,KAAKgI,aAAauV,MAI3C,kBADMvd,KAAKmd,4BAIb,MAAMc,G1BwHRzE,E0BxHuCxZ,KAAKwZ,c1ByH5C/F,E0BzH2D,CACvDlF,KAAM,CACJ/H,KAAMxG,KAAK2M,aAAayC,UAAU1F,GAClC9D,eAAgB5F,KAAKgI,aAAatC,GAClCC,mBAA4B,MAAR+D,EAAeA,EAAKhE,GAAK,KAC7CkB,iBAAkB8C,aAAI,EAAJA,EAAM9C,iBACxBU,WAAYA,I1BqHXkS,EAAc0E,KAA6Clc,GAAuByR,IAJpF,IACL+F,EACA/F,E0B9GE,aADqB,EAAA0K,GAAA,GAAcF,EAAOJ,SAExC,KAAK/b,EAAmBiF,QACtB/G,KAAK6P,WAAWnG,GAChB,MACF,KAAK5H,EAAmB4E,MACxB,KAAK5E,EAAmBoF,QACxB,KAAKpF,EAAmBuF,SACtBrH,KAAKiO,OAGX,G,CAEMiL,a,0CACJ,GAA0B,MAAtBlZ,KAAK2P,cACP,OAGF,MAAOoB,SAAe/Q,KAAKyM,aAAauE,YACtCoC,GACApT,KAAKoe,oBACJlN,IACCA,EAAKtL,eAAiB5F,KAAKgI,aAAatC,GACxCwL,EAAKpE,MAAQ9M,KAAKyR,iBAAiB,UAIjCV,EAAMsN,wBACNre,KAAKiO,MACb,G,CAEMgL,a,gDACEjZ,KAAKse,qBAAoB,EACjC,G,CAEMtF,c,gDACEhZ,KAAKse,qBAAoB,EACjC,G,CAEMA,oBAAoB5K,G,0CACxB,GAA0B,MAAtB1T,KAAK2P,cACP,OAGF,MAAM4O,EAAMve,KAAKyM,aAAayR,KAAK1K,GAA4B,CAC7DgL,qBAAqB,EACrBjQ,KAAM,CACJ3I,eAAgB5F,KAAKgI,aAAatC,GAClCoH,MAAO9M,KAAKyR,kBACZiC,WAAYA,WAIV6K,EAAIF,wBACJre,KAAKiO,MACb,G,CAEM8K,e,0CACJ,GAA0B,MAAtB/Y,KAAK2P,cACP,OAGF,MAAM7C,EAAQ9M,KAAKyR,kBACbtC,EAAgBrC,EAAM1L,QAAQuN,GAAMA,EAAE3F,SAAW,cAEvD,GAAImG,EAAc/I,QAAU,EAC1BpG,KAAKqC,qBAAqBgD,UACxB,QACArF,KAAKoC,YAAYkD,EAAE,iBACnBtF,KAAKoC,YAAYkD,EAAE,kCAJvB,CASA,IACE,MAAM4I,EAAWlO,KAAK2C,wBAAwB8b,iCAC5Cze,KAAKgI,aAAatC,GAClByJ,EAAcjQ,KAAKwK,GAASA,EAAKhE,MAEnC1F,KAAK0e,eACH5R,EACAqC,EACAjB,EACAlO,KAAKoC,YAAYkD,EAAE,uB,CAErB,MAAO2G,GACPjM,KAAKwM,kBAAkBsD,UAAU7D,E,CAEnCjM,KAAK2P,cAAgB,I,CACvB,G,CAEMiJ,c,0CACJ,GAA0B,MAAtB5Y,KAAK2P,cACP,OAGF,MAAOoB,SAAe/Q,KAAKyM,aAAauE,YACtCiB,GACAjS,KAAK2e,qBACJzN,IACCA,EAAKtL,eAAiB5F,KAAKgI,aAAatC,GACxCwL,EAAKpE,MAAQ9M,KAAKyR,iBAAiB,UAIjCV,EAAMsN,wBACNre,KAAKiO,MACb,G,CAEM4K,OAAOnP,G,gDACL1J,KAAKyM,aAAauE,YAAY,KAAuBhR,KAAK4e,gBAAiB1N,IAC/EA,EAAK1K,KAAOxG,KAAK2M,aAAayC,UAAU1F,GACxCwH,EAAKtL,eAAiB5F,KAAKgI,aAAatC,GACxCwL,EAAK2N,SAAWnV,EAAKhE,GACrBwL,EAAK4N,UAAW,EAChB5N,EAAK6N,OAAS,MAAM,GAExB,G,CAEMjG,cAAcpP,G,0CAClB,MAAOqH,SAAe/Q,KAAKyM,aAAauE,YACtCmD,GACAnU,KAAKgf,uBACJ9N,IACCA,EAAK1K,KAAOxG,KAAK2M,aAAayC,UAAU1F,GACxCwH,EAAK/R,MAAgB,MAARuK,EAAeA,EAAKvK,MAAQ,KACzC+R,EAAKtL,eAAiB5F,KAAKgI,aAAatC,GACxCwL,EAAKxL,GAAa,MAARgE,EAAeA,EAAKhE,GAAK,KAGnCwL,EAAKoD,gBAAgB1T,WAAU,KAC7BmQ,EAAMtK,QACNzG,KAAKiO,MAAM,GACX,GAGR,G,CAEgBwB,6BAA6B/F,G,0CAC3C,MAAMuV,EAAiBvV,EAAK9C,iBACxB5G,KAAKoC,YAAYkD,EAAE,sCACnBtF,KAAKoC,YAAYkD,EAAE,6BAEvB,OAAOtF,KAAKqC,qBAAqBwE,WAC/BoY,EACAjf,KAAKoC,YAAYkD,EAAE,qBAAsBtF,KAAK2M,aAAayC,UAAU1F,IACrE1J,KAAKoC,YAAYkD,EAAE,OACnBtF,KAAKoC,YAAYkD,EAAE,MACnB,UAEJ,G,CAEcoZ,eACZ5R,EACAqC,EACA+D,EACAgM,G,0CAEA,MAAOnO,EAAOoO,SAAwBnf,KAAKyM,aAAauE,YACtDkD,GACAlU,KAAKof,oBACJlO,IACCA,EAAKtO,SAAU,CAAI,IAKvB,IAAI6D,GAAQ,EAEZsK,EAAMsO,QAAQze,WAAU,KAClB6F,GACFsK,EAAMtK,O,IAIV,IACE,MAAMyH,QAAiBgF,EAEvB,GAAInC,EAAO,CACT,MAAMuO,EAAmBpR,EAASK,KAC/BnN,QAAQ8a,GAAkB,KAAZA,EAAEhQ,QAChBqT,QAAO,CAACC,EAAGC,IAAO,OAAD,wBAAMD,GAAC,CAAE,CAACC,EAAE/Z,IAAK+Z,EAAEvT,SAAU,CAAC,GAC5CwT,EAA0BvQ,EAAcoQ,QAAO,CAACC,EAAGC,IAAO,OAAD,wBAAMD,GAAC,CAAE,CAACC,EAAE/Z,IAAK+Z,KAAM,CAAC,GAEvFN,EAAerS,MAAQA,EAAM5N,KAAKwK,I,MAChC,IAAIlK,EAA8B,QAApB,EAAA8f,EAAY5V,EAAKhE,WAAG,QAAIwZ,EAMtC,OAJKQ,EAAmBC,eAAejW,EAAKhE,MAC1ClG,EAAUQ,KAAKoC,YAAYkD,EAAE,wBAGxB,CACLoE,KAAMA,EACNwC,MAAOoT,EAAYK,eAAejW,EAAKhE,IACvClG,QAASA,EACV,IAEH2f,EAAevc,SAAU,C,EAE3B,SACA6D,GAAQ,EACRsK,EAAMtK,O,CAEV,G,oCAlhBW0S,IAAe,yQ,oBAAfA,GAAe,uD,GAAA,M,UAIW,O,UAEA,O,UAEC,O,UAEM,O,UAEH,O,UAEC,O,UAED,Q,q/GD1F3C,cACA,+BACE,iCACE,gCAAI,S,gBAAsB,QAC1B,oCACE,oDAEE,2CAAkB,EAAA/X,OAAA,EAAc,I,iBAGhC,gDACE,U,iBAAmB,0BACrB,+BAEA,kDACE,U,iBACA,0BACF,+BAEA,kDACE,U,iBACA,0BACF,+BAEA,kDACE,U,iBACA,0BACF,+BACF,6BAEA,sDAEE,4D,iBAGF,6BAEA,4CAAqD,iCAAS,EAAAmF,QAAQ,IACpE,uCACA,U,iBACF,QACF,2BACF,yBACA,mDAQA,mD,mBA0QA,8DACA,8DACA,8DACA,8DACA,8DACA,8DACA,8DACA,8DACF,uBACA,gB,MAnUQ,sCAGA,oCAEA,sDAEY,6BACV,sDAAoD,kCAG1C,iDACV,qEACiC,sCAGvB,kDACV,+EACiC,uCAGvB,iDACV,qEACiC,sCAMnC,uCAAwB,4CAOxB,oEAIS,iCASZ,8G,8KE5CL,MAAMqZ,GAAiB,CACrB,CACEC,KAAM,GACNC,UAAW3G,GACX4G,YAAa,CAAC,MACdxR,KAAM,CACJyR,QAAS,UACTC,wBAAyB,QASxB,MAAMC,I,kCAAAA,GAAoB,E,oBAApBA,K,wBAHD,eAAsBN,IACtB,SCOL,MAAMO,I,kCAAAA,GAAa,E,oBAAbA,K,wBAdT,KACA,IACAD,GACA/U,K","sources":["webpack://@bitwarden/web-vault/./src/app/organizations/members/components/member-dialog/validators/comma-separated-emails.validator.ts","webpack://@bitwarden/web-vault/./src/app/organizations/members/components/member-dialog/nested-checkbox.component.html","webpack://@bitwarden/web-vault/./src/app/organizations/members/components/member-dialog/nested-checkbox.component.ts","webpack://@bitwarden/web-vault/./src/app/organizations/members/components/member-dialog/member-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/organizations/members/components/member-dialog/member-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/organizations/members/components/member-dialog/member-dialog.module.ts","webpack://@bitwarden/web-vault/../../libs/common/src/abstractions/organization-user/requests/organization-user-confirm.request.ts","webpack://@bitwarden/web-vault/./src/app/organizations/manage/user-confirm.component.html","webpack://@bitwarden/web-vault/./src/app/organizations/manage/user-confirm.component.ts","webpack://@bitwarden/web-vault/./src/app/common/base.people.component.ts","webpack://@bitwarden/web-vault/./src/app/organizations/core/views/organization-user.view.ts","webpack://@bitwarden/web-vault/../../libs/common/src/abstractions/organization-user/requests/organization-user-bulk-confirm.request.ts","webpack://@bitwarden/web-vault/./src/app/organizations/members/components/bulk/bulk-confirm.component.html","webpack://@bitwarden/web-vault/./src/app/organizations/members/components/bulk/bulk-confirm.component.ts","webpack://@bitwarden/web-vault/./src/app/organizations/members/components/bulk/bulk-remove.component.html","webpack://@bitwarden/web-vault/./src/app/organizations/members/components/bulk/bulk-remove.component.ts","webpack://@bitwarden/web-vault/./src/app/organizations/members/components/bulk/bulk-restore-revoke.component.html","webpack://@bitwarden/web-vault/./src/app/organizations/members/components/bulk/bulk-restore-revoke.component.ts","webpack://@bitwarden/web-vault/./src/app/organizations/members/components/bulk/bulk-status.component.html","webpack://@bitwarden/web-vault/./src/app/organizations/members/components/bulk/bulk-status.component.ts","webpack://@bitwarden/web-vault/./src/app/organizations/members/components/reset-password.component.html","webpack://@bitwarden/web-vault/./src/app/organizations/members/components/reset-password.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/toggle-group/toggle-group.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/toggle-group/toggle-group.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/toggle-group/toggle.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/toggle-group/toggle.component.html","webpack://@bitwarden/web-vault/./src/app/organizations/shared/components/search-input/search-input.component.ts","webpack://@bitwarden/web-vault/./src/app/organizations/shared/components/search-input/search-input.component.html","webpack://@bitwarden/web-vault/./src/app/organizations/members/people.component.html","webpack://@bitwarden/web-vault/./src/app/organizations/members/people.component.ts","webpack://@bitwarden/web-vault/./src/app/organizations/members/members-routing.module.ts","webpack://@bitwarden/web-vault/./src/app/organizations/members/members.module.ts"],"sourcesContent":["import { AbstractControl, ValidationErrors, Validators } from \"@angular/forms\";\n\nfunction validateEmails(emails: string) {\n  return (\n    emails\n      .split(\",\")\n      .map((email) => Validators.email(<AbstractControl>{ value: email.trim() }))\n      .find((_) => _ !== null) === undefined\n  );\n}\n\nexport function commaSeparatedEmails(control: AbstractControl): ValidationErrors | null {\n  if (control.value === \"\" || !control.value || validateEmails(control.value)) {\n    return null;\n  }\n  return { multipleEmails: { message: \"multipleInputEmails\" } };\n}\n","<div [formGroup]=\"checkboxes\">\n  <input\n    type=\"checkbox\"\n    [name]=\"pascalize(parentId)\"\n    [id]=\"parentId\"\n    [formControlName]=\"parentId\"\n    [indeterminate]=\"parentIndeterminate\"\n  />\n  <label class=\"!tw-font-normal\" [for]=\"parentId\">\n    {{ parentId | i18n }}\n  </label>\n  <div class=\"tw-ml-6\">\n    <ng-container *ngFor=\"let c of checkboxes.controls | keyvalue; trackBy: key\">\n      <div class=\"\" *ngIf=\"c.key != parentId\">\n        <input\n          class=\"\"\n          type=\"checkbox\"\n          [name]=\"pascalize(c.key)\"\n          [id]=\"c.key\"\n          [formControl]=\"c.value\"\n          (change)=\"onChildCheck()\"\n        />\n        <label class=\"!tw-font-normal\" [for]=\"c.key\">\n          {{ c.key | i18n }}\n        </label>\n      </div>\n    </ng-container>\n  </div>\n</div>\n","import { KeyValue } from \"@angular/common\";\nimport { Component, EventEmitter, Input, Output, OnInit, OnDestroy } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { Utils } from \"@bitwarden/common/misc/utils\";\n\n@Component({\n  selector: \"app-nested-checkbox\",\n  templateUrl: \"nested-checkbox.component.html\",\n})\nexport class NestedCheckboxComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  @Input() parentId: string;\n  @Input() checkboxes: FormGroup<Record<string, FormControl<boolean>>>;\n  @Output() onSavedUser = new EventEmitter();\n  @Output() onDeletedUser = new EventEmitter();\n\n  get parentIndeterminate() {\n    return (\n      this.children.some(([key, control]) => control.value == true) &&\n      !this.children.every(([key, control]) => control.value == true)\n    );\n  }\n\n  ngOnInit(): void {\n    this.checkboxes.controls[this.parentId].valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((value) => {\n        Object.values(this.checkboxes.controls).forEach((control) =>\n          control.setValue(value, { emitEvent: false })\n        );\n      });\n  }\n\n  private get parentCheckbox() {\n    return this.checkboxes.controls[this.parentId];\n  }\n\n  get children() {\n    return Object.entries(this.checkboxes.controls).filter(([key, value]) => key != this.parentId);\n  }\n\n  protected onChildCheck() {\n    const parentChecked = this.children.every(([key, value]) => value.value == true);\n    this.parentCheckbox.setValue(parentChecked, { emitEvent: false });\n  }\n\n  protected key(index: number, item: KeyValue<string, FormControl<boolean>>) {\n    return item.key;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  pascalize(s: string) {\n    return Utils.camelToPascalCase(s);\n  }\n}\n","import { DIALOG_DATA, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { combineLatest, of, shareReplay, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { OrganizationUserService } from \"@bitwarden/common/abstractions/organization-user/organization-user.service\";\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization/organization.service.abstraction\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { OrganizationUserStatusType } from \"@bitwarden/common/enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"@bitwarden/common/enums/organizationUserType\";\nimport { PermissionsApi } from \"@bitwarden/common/models/api/permissions.api\";\nimport { Organization } from \"@bitwarden/common/models/domain/organization\";\nimport { CollectionView } from \"@bitwarden/common/models/view/collection.view\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { flagEnabled } from \"../../../../../utils/flags\";\nimport {\n  CollectionAccessSelectionView,\n  CollectionAdminService,\n  GroupService,\n  GroupView,\n  OrganizationUserAdminView,\n  UserAdminService,\n} from \"../../../core\";\nimport {\n  AccessItemType,\n  AccessItemValue,\n  AccessItemView,\n  convertToPermission,\n  convertToSelectionView,\n  PermissionMode,\n} from \"../../../shared/components/access-selector\";\n\nimport { commaSeparatedEmails } from \"./validators/comma-separated-emails.validator\";\n\nexport enum MemberDialogTab {\n  Role = 0,\n  Groups = 1,\n  Collections = 2,\n}\n\nexport interface MemberDialogParams {\n  name: string;\n  organizationId: string;\n  organizationUserId: string;\n  usesKeyConnector: boolean;\n  initialTab?: MemberDialogTab;\n}\n\nexport enum MemberDialogResult {\n  Saved = \"saved\",\n  Canceled = \"canceled\",\n  Deleted = \"deleted\",\n  Revoked = \"revoked\",\n  Restored = \"restored\",\n}\n\n@Component({\n  selector: \"app-member-dialog\",\n  templateUrl: \"member-dialog.component.html\",\n})\nexport class MemberDialogComponent implements OnInit, OnDestroy {\n  loading = true;\n  editMode = false;\n  isRevoked = false;\n  title: string;\n  access: \"all\" | \"selected\" = \"selected\";\n  collections: CollectionView[] = [];\n  organizationUserType = OrganizationUserType;\n  canUseCustomPermissions: boolean;\n  PermissionMode = PermissionMode;\n  canUseSecretsManager: boolean;\n\n  protected organization: Organization;\n  protected collectionAccessItems: AccessItemView[] = [];\n  protected groupAccessItems: AccessItemView[] = [];\n  protected tabIndex: MemberDialogTab;\n  protected formGroup = this.formBuilder.group({\n    emails: [\"\", [Validators.required, commaSeparatedEmails]],\n    type: OrganizationUserType.User,\n    externalId: this.formBuilder.control({ value: \"\", disabled: true }),\n    accessAllCollections: false,\n    accessSecretsManager: false,\n    access: [[] as AccessItemValue[]],\n    groups: [[] as AccessItemValue[]],\n  });\n\n  protected permissionsGroup = this.formBuilder.group({\n    manageAssignedCollectionsGroup: this.formBuilder.group<Record<string, boolean>>({\n      manageAssignedCollections: false,\n      editAssignedCollections: false,\n      deleteAssignedCollections: false,\n    }),\n    manageAllCollectionsGroup: this.formBuilder.group<Record<string, boolean>>({\n      manageAllCollections: false,\n      createNewCollections: false,\n      editAnyCollection: false,\n      deleteAnyCollection: false,\n    }),\n    accessEventLogs: false,\n    accessImportExport: false,\n    accessReports: false,\n    manageGroups: false,\n    manageSso: false,\n    managePolicies: false,\n    manageUsers: false,\n    manageResetPassword: false,\n  });\n\n  private destroy$ = new Subject<void>();\n\n  get customUserTypeSelected(): boolean {\n    return this.formGroup.value.type === OrganizationUserType.Custom;\n  }\n\n  get accessAllCollections(): boolean {\n    return this.formGroup.value.accessAllCollections;\n  }\n\n  constructor(\n    @Inject(DIALOG_DATA) protected params: MemberDialogParams,\n    private dialogRef: DialogRef<MemberDialogResult>,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private organizationService: OrganizationService,\n    private formBuilder: FormBuilder,\n    // TODO: We should really look into consolidating naming conventions for these services\n    private collectionAdminService: CollectionAdminService,\n    private groupService: GroupService,\n    private userService: UserAdminService,\n    private organizationUserService: OrganizationUserService\n  ) {}\n\n  async ngOnInit() {\n    this.editMode = this.params.organizationUserId != null;\n    this.tabIndex = this.params.initialTab ?? MemberDialogTab.Role;\n    this.title = this.i18nService.t(this.editMode ? \"editMember\" : \"inviteMember\");\n\n    const organization$ = of(this.organizationService.get(this.params.organizationId)).pipe(\n      shareReplay({ refCount: true, bufferSize: 1 })\n    );\n    const groups$ = organization$.pipe(\n      switchMap((organization) => {\n        if (!organization.useGroups) {\n          return of([] as GroupView[]);\n        }\n\n        return this.groupService.getAll(this.params.organizationId);\n      })\n    );\n\n    combineLatest({\n      organization: organization$,\n      collections: this.collectionAdminService.getAll(this.params.organizationId),\n      userDetails: this.params.organizationUserId\n        ? this.userService.get(this.params.organizationId, this.params.organizationUserId)\n        : of(null),\n      groups: groups$,\n    })\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(({ organization, collections, userDetails, groups }) => {\n        this.organization = organization;\n        this.canUseCustomPermissions = organization.useCustomPermissions;\n        this.canUseSecretsManager = organization.useSecretsManager && flagEnabled(\"secretsManager\");\n\n        this.collectionAccessItems = [].concat(\n          collections.map((c) => mapCollectionToAccessItemView(c))\n        );\n\n        this.groupAccessItems = [].concat(\n          groups.map<AccessItemView>((g) => mapGroupToAccessItemView(g))\n        );\n\n        if (this.params.organizationUserId) {\n          if (!userDetails) {\n            throw new Error(\"Could not find user to edit.\");\n          }\n          this.isRevoked = userDetails.status === OrganizationUserStatusType.Revoked;\n          const assignedCollectionsPermissions = {\n            editAssignedCollections: userDetails.permissions.editAssignedCollections,\n            deleteAssignedCollections: userDetails.permissions.deleteAssignedCollections,\n            manageAssignedCollections:\n              userDetails.permissions.editAssignedCollections &&\n              userDetails.permissions.deleteAssignedCollections,\n          };\n          const allCollectionsPermissions = {\n            createNewCollections: userDetails.permissions.createNewCollections,\n            editAnyCollection: userDetails.permissions.editAnyCollection,\n            deleteAnyCollection: userDetails.permissions.deleteAnyCollection,\n            manageAllCollections:\n              userDetails.permissions.createNewCollections &&\n              userDetails.permissions.editAnyCollection &&\n              userDetails.permissions.deleteAnyCollection,\n          };\n          if (userDetails.type === OrganizationUserType.Custom) {\n            this.permissionsGroup.patchValue({\n              accessEventLogs: userDetails.permissions.accessEventLogs,\n              accessImportExport: userDetails.permissions.accessImportExport,\n              accessReports: userDetails.permissions.accessReports,\n              manageGroups: userDetails.permissions.manageGroups,\n              manageSso: userDetails.permissions.manageSso,\n              managePolicies: userDetails.permissions.managePolicies,\n              manageUsers: userDetails.permissions.manageUsers,\n              manageResetPassword: userDetails.permissions.manageResetPassword,\n              manageAssignedCollectionsGroup: assignedCollectionsPermissions,\n              manageAllCollectionsGroup: allCollectionsPermissions,\n            });\n          }\n\n          const collectionsFromGroups = groups\n            .filter((group) => userDetails.groups.includes(group.id))\n            .flatMap((group) =>\n              group.collections.map((accessSelection) => {\n                const collection = collections.find((c) => c.id === accessSelection.id);\n                return { group, collection, accessSelection };\n              })\n            );\n\n          this.collectionAccessItems = this.collectionAccessItems.concat(\n            collectionsFromGroups.map(({ collection, accessSelection, group }) =>\n              mapCollectionToAccessItemView(collection, accessSelection, group)\n            )\n          );\n\n          const accessSelections = mapToAccessSelections(userDetails);\n          const groupAccessSelections = mapToGroupAccessSelections(userDetails.groups);\n\n          this.formGroup.removeControl(\"emails\");\n          this.formGroup.patchValue({\n            type: userDetails.type,\n            externalId: userDetails.externalId,\n            accessAllCollections: userDetails.accessAll,\n            access: accessSelections,\n            accessSecretsManager: userDetails.accessSecretsManager,\n            groups: groupAccessSelections,\n          });\n        }\n\n        this.loading = false;\n      });\n  }\n\n  check(c: CollectionView, select?: boolean) {\n    (c as any).checked = select == null ? !(c as any).checked : select;\n    if (!(c as any).checked) {\n      c.readOnly = false;\n    }\n  }\n\n  selectAll(select: boolean) {\n    this.collections.forEach((c) => this.check(c, select));\n  }\n\n  setRequestPermissions(p: PermissionsApi, clearPermissions: boolean): PermissionsApi {\n    if (clearPermissions) {\n      return new PermissionsApi();\n    }\n    const partialPermissions: Partial<PermissionsApi> = {\n      accessEventLogs: this.permissionsGroup.value.accessEventLogs,\n      accessImportExport: this.permissionsGroup.value.accessImportExport,\n      accessReports: this.permissionsGroup.value.accessReports,\n      manageGroups: this.permissionsGroup.value.manageGroups,\n      manageSso: this.permissionsGroup.value.manageSso,\n      managePolicies: this.permissionsGroup.value.managePolicies,\n      manageUsers: this.permissionsGroup.value.manageUsers,\n      manageResetPassword: this.permissionsGroup.value.manageResetPassword,\n      createNewCollections:\n        this.permissionsGroup.value.manageAllCollectionsGroup.createNewCollections,\n      editAnyCollection: this.permissionsGroup.value.manageAllCollectionsGroup.editAnyCollection,\n      deleteAnyCollection:\n        this.permissionsGroup.value.manageAllCollectionsGroup.deleteAnyCollection,\n      editAssignedCollections:\n        this.permissionsGroup.value.manageAssignedCollectionsGroup.editAssignedCollections,\n      deleteAssignedCollections:\n        this.permissionsGroup.value.manageAssignedCollectionsGroup.deleteAssignedCollections,\n    };\n\n    return Object.assign(p, partialPermissions);\n  }\n\n  handleDependentPermissions() {\n    // Manage Password Reset must have Manage Users enabled\n    if (\n      this.permissionsGroup.value.manageResetPassword &&\n      !this.permissionsGroup.value.manageUsers\n    ) {\n      this.permissionsGroup.value.manageUsers = true;\n      (document.getElementById(\"manageUsers\") as HTMLInputElement).checked = true;\n      this.platformUtilsService.showToast(\n        \"info\",\n        null,\n        this.i18nService.t(\"resetPasswordManageUsers\")\n      );\n    }\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      if (this.tabIndex !== MemberDialogTab.Role) {\n        this.platformUtilsService.showToast(\n          \"error\",\n          null,\n          this.i18nService.t(\"fieldOnTabRequiresAttention\", this.i18nService.t(\"role\"))\n        );\n      }\n      return;\n    }\n\n    if (!this.canUseCustomPermissions && this.customUserTypeSelected) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"customNonEnterpriseError\")\n      );\n      return;\n    }\n\n    const userView = new OrganizationUserAdminView();\n    userView.id = this.params.organizationUserId;\n    userView.organizationId = this.params.organizationId;\n    userView.accessAll = this.accessAllCollections;\n    userView.type = this.formGroup.value.type;\n    userView.permissions = this.setRequestPermissions(\n      userView.permissions ?? new PermissionsApi(),\n      userView.type !== OrganizationUserType.Custom\n    );\n    userView.collections = this.formGroup.value.access\n      .filter((v) => v.type === AccessItemType.Collection)\n      .map(convertToSelectionView);\n    userView.groups = this.formGroup.value.groups.map((m) => m.id);\n    userView.accessSecretsManager = this.formGroup.value.accessSecretsManager;\n\n    if (this.editMode) {\n      await this.userService.save(userView);\n    } else {\n      userView.id = this.params.organizationUserId;\n      const emails = [...new Set(this.formGroup.value.emails.trim().split(/\\s*,\\s*/))];\n      if (emails.length > 20) {\n        this.formGroup.controls.emails.setErrors({\n          tooManyEmails: { message: this.i18nService.t(\"tooManyEmails\", 20) },\n        });\n        return;\n      }\n      await this.userService.invite(emails, userView);\n    }\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(this.editMode ? \"editedUserId\" : \"invitedUsers\", this.params.name)\n    );\n    this.close(MemberDialogResult.Saved);\n  };\n\n  delete = async () => {\n    if (!this.editMode) {\n      return;\n    }\n\n    const message = this.params.usesKeyConnector\n      ? \"removeUserConfirmationKeyConnector\"\n      : \"removeOrgUserConfirmation\";\n    const confirmed = await this.platformUtilsService.showDialog(\n      this.i18nService.t(message),\n      this.i18nService.t(\"removeUserIdAccess\", this.params.name),\n      this.i18nService.t(\"yes\"),\n      this.i18nService.t(\"no\"),\n      \"warning\",\n      false,\n      \"app-user-add-edit .modal-content\"\n    );\n    if (!confirmed) {\n      return false;\n    }\n\n    await this.organizationUserService.deleteOrganizationUser(\n      this.params.organizationId,\n      this.params.organizationUserId\n    );\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"removedUserId\", this.params.name)\n    );\n    this.close(MemberDialogResult.Deleted);\n  };\n\n  revoke = async () => {\n    if (!this.editMode) {\n      return;\n    }\n\n    const confirmed = await this.platformUtilsService.showDialog(\n      this.i18nService.t(\"revokeUserConfirmation\"),\n      this.i18nService.t(\"revokeUserId\", this.params.name),\n      this.i18nService.t(\"revokeAccess\"),\n      this.i18nService.t(\"cancel\"),\n      \"warning\",\n      false,\n      \"app-user-add-edit .modal-content\"\n    );\n    if (!confirmed) {\n      return false;\n    }\n\n    await this.organizationUserService.revokeOrganizationUser(\n      this.params.organizationId,\n      this.params.organizationUserId\n    );\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"revokedUserId\", this.params.name)\n    );\n    this.isRevoked = true;\n    this.close(MemberDialogResult.Revoked);\n  };\n\n  restore = async () => {\n    if (!this.editMode) {\n      return;\n    }\n\n    await this.organizationUserService.restoreOrganizationUser(\n      this.params.organizationId,\n      this.params.organizationUserId\n    );\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"restoredUserId\", this.params.name)\n    );\n    this.isRevoked = false;\n    this.close(MemberDialogResult.Restored);\n  };\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  protected async cancel() {\n    this.close(MemberDialogResult.Canceled);\n  }\n\n  private close(result: MemberDialogResult) {\n    this.dialogRef.close(result);\n  }\n}\n\nfunction mapCollectionToAccessItemView(\n  collection: CollectionView,\n  accessSelection?: CollectionAccessSelectionView,\n  group?: GroupView\n): AccessItemView {\n  return {\n    type: AccessItemType.Collection,\n    id: group ? `${collection.id}-${group.id}` : collection.id,\n    labelName: collection.name,\n    listName: collection.name,\n    readonly: group !== undefined,\n    readonlyPermission: accessSelection ? convertToPermission(accessSelection) : undefined,\n    viaGroupName: group?.name,\n  };\n}\n\nfunction mapGroupToAccessItemView(group: GroupView): AccessItemView {\n  return {\n    type: AccessItemType.Group,\n    id: group.id,\n    labelName: group.name,\n    listName: group.name,\n  };\n}\n\nfunction mapToAccessSelections(user: OrganizationUserAdminView): AccessItemValue[] {\n  if (user == undefined) {\n    return [];\n  }\n  return [].concat(\n    user.collections.map<AccessItemValue>((selection) => ({\n      id: selection.id,\n      type: AccessItemType.Collection,\n      permission: convertToPermission(selection),\n    }))\n  );\n}\n\nfunction mapToGroupAccessSelections(groups: string[]): AccessItemValue[] {\n  if (groups == undefined) {\n    return [];\n  }\n  return [].concat(\n    groups.map((groupId) => ({\n      id: groupId,\n      type: AccessItemType.Group,\n    }))\n  );\n}\n\n/**\n * Strongly typed helper to open a UserDialog\n * @param dialogService Instance of the dialog service that will be used to open the dialog\n * @param config Configuration for the dialog\n */\nexport function openUserAddEditDialog(\n  dialogService: DialogService,\n  config: DialogConfig<MemberDialogParams>\n) {\n  return dialogService.open<MemberDialogResult, MemberDialogParams>(MemberDialogComponent, config);\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog [disablePadding]=\"!loading\">\n    <span bitDialogTitle>\n      {{ title }}\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\" *ngIf=\"!loading && params.name\">{{\n        params.name\n      }}</span>\n      <span bitBadge badgeType=\"secondary\" *ngIf=\"isRevoked\">{{ \"revoked\" | i18n }}</span>\n    </span>\n    <div bitDialogContent>\n      <ng-container *ngIf=\"loading\">\n        <i\n          class=\"bwi bwi-spinner bwi-spin text-muted\"\n          title=\"{{ 'loading' | i18n }}\"\n          aria-hidden=\"true\"\n        ></i>\n        <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n      </ng-container>\n      <bit-tab-group *ngIf=\"!loading\" [(selectedIndex)]=\"tabIndex\">\n        <bit-tab [label]=\"'role' | i18n\">\n          <ng-container *ngIf=\"!editMode\">\n            <p>{{ \"inviteUserDesc\" | i18n }}</p>\n            <bit-form-field>\n              <bit-label>{{ \"email\" | i18n }}</bit-label>\n              <input id=\"emails\" type=\"text\" appAutoFocus bitInput formControlName=\"emails\" />\n              <bit-hint>{{ \"inviteMultipleEmailDesc\" | i18n: \"20\" }}</bit-hint>\n            </bit-form-field>\n          </ng-container>\n          <fieldset role=\"radiogroup\" aria-labelledby=\"roleGroupLabel\" class=\"tw-mb-6\">\n            <legend\n              id=\"roleGroupLabel\"\n              class=\"tw-mb-2 tw-block tw-text-base tw-font-semibold tw-text-main\"\n            >\n              {{ \"memberRole\" | i18n }}\n              <a\n                target=\"_blank\"\n                rel=\"noopener\"\n                appA11yTitle=\"{{ 'learnMore' | i18n }}\"\n                href=\"https://bitwarden.com/help/user-types-access-control/\"\n              >\n                <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n              </a>\n            </legend>\n            <div class=\"tw-mb-2 tw-flex tw-items-baseline\">\n              <input\n                type=\"radio\"\n                id=\"userTypeUser\"\n                [value]=\"organizationUserType.User\"\n                class=\"tw-relative tw-bottom-[-1px] tw-mr-2\"\n                formControlName=\"type\"\n                name=\"type\"\n              />\n              <label class=\"tw-m-0\" for=\"userTypeUser\">\n                {{ \"user\" | i18n }}\n                <div class=\"text-base tw-block tw-font-normal tw-text-muted\">\n                  {{ \"userDesc\" | i18n }}\n                </div>\n              </label>\n            </div>\n            <div class=\"tw-mb-2 tw-flex tw-items-baseline\">\n              <input\n                type=\"radio\"\n                id=\"userTypeManager\"\n                [value]=\"organizationUserType.Manager\"\n                class=\"tw-relative tw-bottom-[-1px] tw-mr-2\"\n                formControlName=\"type\"\n                name=\"type\"\n              />\n              <label class=\"tw-m-0\" for=\"userTypeManager\">\n                {{ \"manager\" | i18n }}\n                <div class=\"text-base tw-block tw-font-normal tw-text-muted\">\n                  {{ \"managerDesc\" | i18n }}\n                </div>\n              </label>\n            </div>\n            <div class=\"tw-mb-2 tw-flex tw-items-baseline\">\n              <input\n                type=\"radio\"\n                id=\"userTypeAdmin\"\n                [value]=\"organizationUserType.Admin\"\n                class=\"tw-relative tw-bottom-[-1px] tw-mr-2\"\n                formControlName=\"type\"\n                name=\"type\"\n              />\n              <label class=\"tw-m-0\" for=\"userTypeAdmin\">\n                {{ \"admin\" | i18n }}\n                <div class=\"text-base tw-block tw-font-normal tw-text-muted\">\n                  {{ \"adminDesc\" | i18n }}\n                </div>\n              </label>\n            </div>\n            <div class=\"tw-mb-2 tw-flex tw-items-baseline\">\n              <input\n                type=\"radio\"\n                id=\"userTypeOwner\"\n                [value]=\"organizationUserType.Owner\"\n                class=\"tw-relative tw-bottom-[-1px] tw-mr-2\"\n                formControlName=\"type\"\n                name=\"type\"\n              />\n              <label class=\"tw-m-0\" for=\"userTypeOwner\">\n                {{ \"owner\" | i18n }}\n                <div class=\"text-base tw-block tw-font-normal tw-text-muted\">\n                  {{ \"ownerDesc\" | i18n }}\n                </div>\n              </label>\n            </div>\n            <div class=\"tw-flex tw-items-baseline\">\n              <input\n                type=\"radio\"\n                id=\"userTypeCustom\"\n                [value]=\"organizationUserType.Custom\"\n                formControlName=\"type\"\n                name=\"type\"\n                class=\"tw-relative tw-bottom-[-1px] tw-mr-2\"\n                [attr.disabled]=\"!canUseCustomPermissions || null\"\n              />\n              <label class=\"tw-m-0\" for=\"userTypeCustom\">\n                {{ \"custom\" | i18n }}\n                <ng-container *ngIf=\"!canUseCustomPermissions; else enterprise\">\n                  <div class=\"text-base tw-block tw-font-normal tw-text-muted\">\n                    {{ \"customDescNonEnterpriseStart\" | i18n\n                    }}<a href=\"https://bitwarden.com/contact/\" target=\"_blank\">{{\n                      \"customDescNonEnterpriseLink\" | i18n\n                    }}</a\n                    >{{ \"customDescNonEnterpriseEnd\" | i18n }}\n                  </div>\n                </ng-container>\n                <ng-template #enterprise>\n                  <div class=\"text-base tw-block tw-font-normal tw-text-muted\">\n                    {{ \"customDesc\" | i18n }}\n                  </div>\n                </ng-template>\n              </label>\n            </div>\n          </fieldset>\n          <ng-container *ngIf=\"customUserTypeSelected\">\n            <h3 class=\"mt-4 d-flex tw-font-semibold\">\n              {{ \"permissions\" | i18n }}\n            </h3>\n            <div class=\"row\" [formGroup]=\"permissionsGroup\">\n              <div class=\"col-6\">\n                <div class=\"mb-3\">\n                  <label class=\"tw-font-semibold\">{{ \"managerPermissions\" | i18n }}</label>\n                  <hr class=\"tw-mt-0 tw-mb-2 tw-mr-2\" />\n                  <app-nested-checkbox\n                    parentId=\"manageAssignedCollections\"\n                    [checkboxes]=\"permissionsGroup.controls.manageAssignedCollectionsGroup\"\n                  >\n                  </app-nested-checkbox>\n                </div>\n              </div>\n              <div class=\"col-6\">\n                <div class=\"mb-3\">\n                  <label class=\"tw-font-semibold\">{{ \"adminPermissions\" | i18n }}</label>\n                  <hr class=\"tw-mt-0 tw-mb-2 tw-mr-2\" />\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      name=\"accessEventLogs\"\n                      id=\"accessEventLogs\"\n                      formControlName=\"accessEventLogs\"\n                    />\n                    <label class=\"!tw-font-normal\" for=\"accessEventLogs\">\n                      {{ \"accessEventLogs\" | i18n }}\n                    </label>\n                  </div>\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      name=\"accessImportExport\"\n                      id=\"accessImportExport\"\n                      formControlName=\"accessImportExport\"\n                    />\n                    <label class=\"!tw-font-normal\" for=\"accessImportExport\">\n                      {{ \"accessImportExport\" | i18n }}\n                    </label>\n                  </div>\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      name=\"accessReports\"\n                      id=\"accessReports\"\n                      formControlName=\"accessReports\"\n                    />\n                    <label class=\"!tw-font-normal\" for=\"accessReports\">\n                      {{ \"accessReports\" | i18n }}\n                    </label>\n                  </div>\n                  <app-nested-checkbox\n                    parentId=\"manageAllCollections\"\n                    [checkboxes]=\"permissionsGroup.controls.manageAllCollectionsGroup\"\n                  >\n                  </app-nested-checkbox>\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      name=\"manageGroups\"\n                      id=\"manageGroups\"\n                      formControlName=\"manageGroups\"\n                    />\n                    <label class=\"!tw-font-normal\" for=\"manageGroups\">\n                      {{ \"manageGroups\" | i18n }}\n                    </label>\n                  </div>\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      name=\"manageSso\"\n                      id=\"manageSso\"\n                      formControlName=\"manageSso\"\n                    />\n                    <label class=\"!tw-font-normal\" for=\"manageSso\">\n                      {{ \"manageSso\" | i18n }}\n                    </label>\n                  </div>\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      name=\"managePolicies\"\n                      id=\"managePolicies\"\n                      formControlName=\"managePolicies\"\n                    />\n                    <label class=\"!tw-font-normal\" for=\"managePolicies\">\n                      {{ \"managePolicies\" | i18n }}\n                    </label>\n                  </div>\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      name=\"manageUsers\"\n                      id=\"manageUsers\"\n                      formControlName=\"manageUsers\"\n                      (change)=\"handleDependentPermissions()\"\n                    />\n                    <label class=\"!tw-font-normal\" for=\"manageUsers\">\n                      {{ \"manageUsers\" | i18n }}\n                    </label>\n                  </div>\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      name=\"manageResetPassword\"\n                      id=\"manageResetPassword\"\n                      formControlName=\"manageResetPassword\"\n                      (change)=\"handleDependentPermissions()\"\n                    />\n                    <label class=\"!tw-font-normal\" for=\"manageResetPassword\">\n                      {{ \"manageResetPassword\" | i18n }}\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </ng-container>\n          <ng-container *ngIf=\"canUseSecretsManager\">\n            <h3 class=\"mt-4\">\n              {{ \"secretsManagerBeta\" | i18n }}\n              <a\n                target=\"_blank\"\n                rel=\"noopener\"\n                appA11yTitle=\"{{ 'learnMore' | i18n }}\"\n                href=\"https://bitwarden.com/help/manage-your-organization/#access-to-secrets-manager\"\n              >\n                <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n              </a>\n            </h3>\n            <p class=\"tw-text-muted\">{{ \"secretsManagerBetaDesc\" | i18n }}</p>\n            <bit-form-control>\n              <input type=\"checkbox\" bitCheckbox formControlName=\"accessSecretsManager\" />\n              <bit-label>\n                {{ \"userAccessSecretsManager\" | i18n }}\n              </bit-label>\n            </bit-form-control>\n          </ng-container>\n          <bit-form-field>\n            <bit-label>{{ \"externalId\" | i18n }}</bit-label>\n            <input bitInput type=\"text\" formControlName=\"externalId\" />\n            <bit-hint>{{ \"externalIdDesc\" | i18n }}</bit-hint>\n          </bit-form-field>\n        </bit-tab>\n        <bit-tab *ngIf=\"organization.useGroups\" [label]=\"'groups' | i18n\">\n          <div class=\"tw-mb-6\">\n            {{ \"groupAccessUserDesc\" | i18n }}\n          </div>\n          <bit-access-selector\n            formControlName=\"groups\"\n            [items]=\"groupAccessItems\"\n            [columnHeader]=\"'groups' | i18n\"\n            [selectorLabelText]=\"'selectGroups' | i18n\"\n            [emptySelectionText]=\"'noGroupsAdded' | i18n\"\n          ></bit-access-selector>\n        </bit-tab>\n        <bit-tab [label]=\"'collections' | i18n\">\n          <div *ngIf=\"organization.useGroups\" class=\"tw-mb-6\">\n            {{ \"userPermissionOverrideHelper\" | i18n }}\n          </div>\n          <div class=\"tw-mb-6\">\n            <bit-form-control>\n              <input type=\"checkbox\" bitCheckbox formControlName=\"accessAllCollections\" />\n              <bit-label>\n                {{ \"accessAllCollectionsDesc\" | i18n }}\n                <a\n                  target=\"_blank\"\n                  rel=\"noopener\"\n                  appA11yTitle=\"{{ 'learnMore' | i18n }}\"\n                  href=\"https://bitwarden.com/help/user-types-access-control/#access-control\"\n                >\n                  <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n                </a>\n              </bit-label>\n              <bit-hint>{{ \"accessAllCollectionsHelp\" | i18n }}</bit-hint>\n            </bit-form-control>\n          </div>\n          <bit-access-selector\n            *ngIf=\"!accessAllCollections\"\n            [permissionMode]=\"PermissionMode.Edit\"\n            formControlName=\"access\"\n            [showGroupColumn]=\"organization.useGroups\"\n            [items]=\"collectionAccessItems\"\n            [columnHeader]=\"'collection' | i18n\"\n            [selectorLabelText]=\"'selectCollections' | i18n\"\n            [emptySelectionText]=\"'noCollectionsAdded' | i18n\"\n          ></bit-access-selector\n        ></bit-tab>\n      </bit-tab-group>\n    </div>\n    <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n      <button type=\"submit\" bitButton bitFormButton buttonType=\"primary\" [disabled]=\"loading\">\n        {{ \"save\" | i18n }}\n      </button>\n      <button\n        type=\"button\"\n        bitButton\n        bitFormButton\n        buttonType=\"secondary\"\n        (click)=\"cancel()\"\n        [disabled]=\"loading\"\n      >\n        {{ \"cancel\" | i18n }}\n      </button>\n      <div class=\"tw-ml-auto\">\n        <button\n          *ngIf=\"editMode && isRevoked\"\n          type=\"button\"\n          bitButton\n          bitFormButton\n          buttonType=\"secondary\"\n          [bitAction]=\"restore\"\n          [disabled]=\"loading\"\n        >\n          {{ \"restoreAccess\" | i18n }}\n        </button>\n        <button\n          *ngIf=\"editMode && !isRevoked\"\n          type=\"button\"\n          bitButton\n          bitFormButton\n          buttonType=\"secondary\"\n          [bitAction]=\"revoke\"\n          [disabled]=\"loading\"\n        >\n          {{ \"revokeAccess\" | i18n }}\n        </button>\n        <button\n          *ngIf=\"editMode\"\n          type=\"button\"\n          bitIconButton=\"bwi-trash\"\n          buttonType=\"danger\"\n          bitFormButton\n          [appA11yTitle]=\"'delete' | i18n\"\n          [bitAction]=\"delete\"\n          [disabled]=\"loading\"\n        ></button>\n      </div>\n    </div>\n  </bit-dialog>\n</form>\n","import { NgModule } from \"@angular/core\";\n\nimport { RadioButtonModule } from \"@bitwarden/components\";\n\nimport { SharedOrganizationModule } from \"../../../shared\";\n\nimport { MemberDialogComponent } from \"./member-dialog.component\";\nimport { NestedCheckboxComponent } from \"./nested-checkbox.component\";\n\n@NgModule({\n  declarations: [MemberDialogComponent, NestedCheckboxComponent],\n  imports: [SharedOrganizationModule, RadioButtonModule],\n  exports: [MemberDialogComponent],\n})\nexport class UserDialogModule {}\n","export class OrganizationUserConfirmRequest {\n  key: string;\n}\n","<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"confirmUserTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form class=\"modal-content\" #form (ngSubmit)=\"submit()\" [appApiAction]=\"formPromise\">\n      <div class=\"modal-header\">\n        <h1 class=\"modal-title\" id=\"confirmUserTitle\">\n          {{ \"confirmUser\" | i18n }}\n          <small class=\"text-muted\" *ngIf=\"name\">{{ name }}</small>\n        </h1>\n        <button\n          type=\"button\"\n          class=\"close\"\n          data-dismiss=\"modal\"\n          appA11yTitle=\"{{ 'close' | i18n }}\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <p>\n          {{ \"fingerprintEnsureIntegrityVerify\" | i18n }}\n          <a href=\"https://bitwarden.com/help/fingerprint-phrase/\" target=\"_blank\" rel=\"noopener\">\n            {{ \"learnMore\" | i18n }}</a\n          >\n        </p>\n        <p>\n          <code>{{ fingerprint }}</code>\n        </p>\n        <div class=\"form-check\">\n          <input\n            class=\"form-check-input\"\n            type=\"checkbox\"\n            id=\"dontAskAgain\"\n            name=\"DontAskAgain\"\n            [(ngModel)]=\"dontAskAgain\"\n          />\n          <label class=\"form-check-label\" for=\"dontAskAgain\">\n            {{ \"dontAskFingerprintAgain\" | i18n }}\n          </label>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"submit\" class=\"btn btn-primary btn-submit\" [disabled]=\"form.loading\">\n          <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n          <span>{{ \"confirm\" | i18n }}</span>\n        </button>\n        <button type=\"button\" class=\"btn btn-outline-secondary\" data-dismiss=\"modal\">\n          {{ \"cancel\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\n\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\n\n@Component({\n  selector: \"app-user-confirm\",\n  templateUrl: \"user-confirm.component.html\",\n})\nexport class UserConfirmComponent implements OnInit {\n  @Input() name: string;\n  @Input() userId: string;\n  @Input() publicKey: Uint8Array;\n  @Output() onConfirmedUser = new EventEmitter();\n\n  dontAskAgain = false;\n  loading = true;\n  fingerprint: string;\n  formPromise: Promise<any>;\n\n  constructor(\n    private cryptoService: CryptoService,\n    private logService: LogService,\n    private stateService: StateService\n  ) {}\n\n  async ngOnInit() {\n    try {\n      if (this.publicKey != null) {\n        const fingerprint = await this.cryptoService.getFingerprint(\n          this.userId,\n          this.publicKey.buffer\n        );\n        if (fingerprint != null) {\n          this.fingerprint = fingerprint.join(\"-\");\n        }\n      }\n    } catch (e) {\n      this.logService.error(e);\n    }\n    this.loading = false;\n  }\n\n  async submit() {\n    if (this.loading) {\n      return;\n    }\n\n    if (this.dontAskAgain) {\n      await this.stateService.setAutoConfirmFingerprints(true);\n    }\n\n    this.onConfirmedUser.emit();\n  }\n}\n","import { Directive, ViewChild, ViewContainerRef } from \"@angular/core\";\n\nimport { SearchPipe } from \"@bitwarden/angular/pipes/search.pipe\";\nimport { UserNamePipe } from \"@bitwarden/angular/pipes/user-name.pipe\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { SearchService } from \"@bitwarden/common/abstractions/search.service\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\nimport { OrganizationUserStatusType } from \"@bitwarden/common/enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"@bitwarden/common/enums/organizationUserType\";\nimport { ProviderUserStatusType } from \"@bitwarden/common/enums/providerUserStatusType\";\nimport { ProviderUserType } from \"@bitwarden/common/enums/providerUserType\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { ProviderUserUserDetailsResponse } from \"@bitwarden/common/models/response/provider/provider-user.response\";\n\nimport { OrganizationUserView } from \"../organizations/core/views/organization-user.view\";\nimport { UserConfirmComponent } from \"../organizations/manage/user-confirm.component\";\n\ntype StatusType = OrganizationUserStatusType | ProviderUserStatusType;\n\nconst MaxCheckedCount = 500;\n\n@Directive()\nexport abstract class BasePeopleComponent<\n  UserType extends ProviderUserUserDetailsResponse | OrganizationUserView\n> {\n  @ViewChild(\"confirmTemplate\", { read: ViewContainerRef, static: true })\n  confirmModalRef: ViewContainerRef;\n\n  get allCount() {\n    return this.activeUsers != null ? this.activeUsers.length : 0;\n  }\n\n  get invitedCount() {\n    return this.statusMap.has(this.userStatusType.Invited)\n      ? this.statusMap.get(this.userStatusType.Invited).length\n      : 0;\n  }\n\n  get acceptedCount() {\n    return this.statusMap.has(this.userStatusType.Accepted)\n      ? this.statusMap.get(this.userStatusType.Accepted).length\n      : 0;\n  }\n\n  get confirmedCount() {\n    return this.statusMap.has(this.userStatusType.Confirmed)\n      ? this.statusMap.get(this.userStatusType.Confirmed).length\n      : 0;\n  }\n\n  get revokedCount() {\n    return this.statusMap.has(this.userStatusType.Revoked)\n      ? this.statusMap.get(this.userStatusType.Revoked).length\n      : 0;\n  }\n\n  get showConfirmUsers(): boolean {\n    return (\n      this.activeUsers != null &&\n      this.statusMap != null &&\n      this.activeUsers.length > 1 &&\n      this.confirmedCount > 0 &&\n      this.confirmedCount < 3 &&\n      this.acceptedCount > 0\n    );\n  }\n\n  get showBulkConfirmUsers(): boolean {\n    return this.acceptedCount > 0;\n  }\n\n  abstract userType: typeof OrganizationUserType | typeof ProviderUserType;\n  abstract userStatusType: typeof OrganizationUserStatusType | typeof ProviderUserStatusType;\n\n  loading = true;\n  statusMap = new Map<StatusType, UserType[]>();\n  status: StatusType;\n  users: UserType[] = [];\n  pagedUsers: UserType[] = [];\n  searchText: string;\n  actionPromise: Promise<void>;\n\n  protected allUsers: UserType[] = [];\n  protected activeUsers: UserType[] = [];\n\n  protected didScroll = false;\n  protected pageSize = 100;\n\n  private pagedUsersCount = 0;\n\n  constructor(\n    protected apiService: ApiService,\n    private searchService: SearchService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected cryptoService: CryptoService,\n    protected validationService: ValidationService,\n    protected modalService: ModalService,\n    private logService: LogService,\n    private searchPipe: SearchPipe,\n    protected userNamePipe: UserNamePipe,\n    protected stateService: StateService\n  ) {}\n\n  abstract edit(user: UserType): void;\n  abstract getUsers(): Promise<ListResponse<UserType> | UserType[]>;\n  abstract deleteUser(id: string): Promise<void>;\n  abstract revokeUser(id: string): Promise<void>;\n  abstract restoreUser(id: string): Promise<void>;\n  abstract reinviteUser(id: string): Promise<void>;\n  abstract confirmUser(user: UserType, publicKey: Uint8Array): Promise<void>;\n\n  async load() {\n    const response = await this.getUsers();\n    this.statusMap.clear();\n    this.activeUsers = [];\n    for (const status of Utils.iterateEnum(this.userStatusType)) {\n      this.statusMap.set(status, []);\n    }\n\n    if (response instanceof ListResponse) {\n      this.allUsers = response.data != null && response.data.length > 0 ? response.data : [];\n    } else if (Array.isArray(response)) {\n      this.allUsers = response;\n    }\n\n    this.allUsers.sort(\n      Utils.getSortFunction<ProviderUserUserDetailsResponse | OrganizationUserView>(\n        this.i18nService,\n        \"email\"\n      )\n    );\n    this.allUsers.forEach((u) => {\n      if (!this.statusMap.has(u.status)) {\n        this.statusMap.set(u.status, [u]);\n      } else {\n        this.statusMap.get(u.status).push(u);\n      }\n      if (u.status !== this.userStatusType.Revoked) {\n        this.activeUsers.push(u);\n      }\n    });\n    this.filter(this.status);\n    this.loading = false;\n  }\n\n  filter(status: StatusType) {\n    this.status = status;\n    if (this.status != null) {\n      this.users = this.statusMap.get(this.status);\n    } else {\n      this.users = this.activeUsers;\n    }\n    // Reset checkbox selecton\n    this.selectAll(false);\n    this.resetPaging();\n  }\n\n  loadMore() {\n    if (!this.users || this.users.length <= this.pageSize) {\n      return;\n    }\n    const pagedLength = this.pagedUsers.length;\n    let pagedSize = this.pageSize;\n    if (pagedLength === 0 && this.pagedUsersCount > this.pageSize) {\n      pagedSize = this.pagedUsersCount;\n    }\n    if (this.users.length > pagedLength) {\n      this.pagedUsers = this.pagedUsers.concat(\n        this.users.slice(pagedLength, pagedLength + pagedSize)\n      );\n    }\n    this.pagedUsersCount = this.pagedUsers.length;\n    this.didScroll = this.pagedUsers.length > this.pageSize;\n  }\n\n  checkUser(user: UserType, select?: boolean) {\n    (user as any).checked = select == null ? !(user as any).checked : select;\n  }\n\n  selectAll(select: boolean) {\n    if (select) {\n      this.selectAll(false);\n    }\n\n    const filteredUsers = this.searchPipe.transform(\n      this.users,\n      this.searchText,\n      \"name\",\n      \"email\",\n      \"id\"\n    );\n\n    const selectCount =\n      select && filteredUsers.length > MaxCheckedCount ? MaxCheckedCount : filteredUsers.length;\n    for (let i = 0; i < selectCount; i++) {\n      this.checkUser(filteredUsers[i], select);\n    }\n  }\n\n  async resetPaging() {\n    this.pagedUsers = [];\n    this.loadMore();\n  }\n\n  invite() {\n    this.edit(null);\n  }\n\n  protected async removeUserConfirmationDialog(user: UserType) {\n    return this.platformUtilsService.showDialog(\n      this.i18nService.t(\"removeUserConfirmation\"),\n      this.userNamePipe.transform(user),\n      this.i18nService.t(\"yes\"),\n      this.i18nService.t(\"no\"),\n      \"warning\"\n    );\n  }\n\n  async remove(user: UserType) {\n    const confirmed = await this.removeUserConfirmationDialog(user);\n    if (!confirmed) {\n      return false;\n    }\n\n    this.actionPromise = this.deleteUser(user.id);\n    try {\n      await this.actionPromise;\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"removedUserId\", this.userNamePipe.transform(user))\n      );\n      this.removeUser(user);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n    this.actionPromise = null;\n  }\n\n  async revoke(user: UserType) {\n    const confirmed = await this.platformUtilsService.showDialog(\n      this.revokeWarningMessage(),\n      this.i18nService.t(\"revokeUserId\", this.userNamePipe.transform(user)),\n      this.i18nService.t(\"revokeAccess\"),\n      this.i18nService.t(\"cancel\"),\n      \"warning\"\n    );\n\n    if (!confirmed) {\n      return false;\n    }\n\n    this.actionPromise = this.revokeUser(user.id);\n    try {\n      await this.actionPromise;\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"revokedUserId\", this.userNamePipe.transform(user))\n      );\n      await this.load();\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n    this.actionPromise = null;\n  }\n\n  async restore(user: UserType) {\n    this.actionPromise = this.restoreUser(user.id);\n    try {\n      await this.actionPromise;\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"restoredUserId\", this.userNamePipe.transform(user))\n      );\n      await this.load();\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n    this.actionPromise = null;\n  }\n\n  async reinvite(user: UserType) {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    this.actionPromise = this.reinviteUser(user.id);\n    try {\n      await this.actionPromise;\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"hasBeenReinvited\", this.userNamePipe.transform(user))\n      );\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n    this.actionPromise = null;\n  }\n\n  async confirm(user: UserType) {\n    function updateUser(self: BasePeopleComponent<UserType>) {\n      user.status = self.userStatusType.Confirmed;\n      const mapIndex = self.statusMap.get(self.userStatusType.Accepted).indexOf(user);\n      if (mapIndex > -1) {\n        self.statusMap.get(self.userStatusType.Accepted).splice(mapIndex, 1);\n        self.statusMap.get(self.userStatusType.Confirmed).push(user);\n      }\n    }\n\n    const confirmUser = async (publicKey: Uint8Array) => {\n      try {\n        this.actionPromise = this.confirmUser(user, publicKey);\n        await this.actionPromise;\n        updateUser(this);\n        this.platformUtilsService.showToast(\n          \"success\",\n          null,\n          this.i18nService.t(\"hasBeenConfirmed\", this.userNamePipe.transform(user))\n        );\n      } catch (e) {\n        this.validationService.showError(e);\n        throw e;\n      } finally {\n        this.actionPromise = null;\n      }\n    };\n\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    try {\n      const publicKeyResponse = await this.apiService.getUserPublicKey(user.userId);\n      const publicKey = Utils.fromB64ToArray(publicKeyResponse.publicKey);\n\n      const autoConfirm = await this.stateService.getAutoConfirmFingerPrints();\n      if (autoConfirm == null || !autoConfirm) {\n        const [modal] = await this.modalService.openViewRef(\n          UserConfirmComponent,\n          this.confirmModalRef,\n          (comp) => {\n            comp.name = this.userNamePipe.transform(user);\n            comp.userId = user != null ? user.userId : null;\n            comp.publicKey = publicKey;\n            // eslint-disable-next-line rxjs/no-async-subscribe\n            comp.onConfirmedUser.subscribe(async () => {\n              try {\n                comp.formPromise = confirmUser(publicKey);\n                await comp.formPromise;\n                modal.close();\n              } catch (e) {\n                this.logService.error(e);\n              }\n            });\n          }\n        );\n        return;\n      }\n\n      try {\n        const fingerprint = await this.cryptoService.getFingerprint(user.userId, publicKey.buffer);\n        this.logService.info(`User's fingerprint: ${fingerprint.join(\"-\")}`);\n      } catch (e) {\n        this.logService.error(e);\n      }\n      await confirmUser(publicKey);\n    } catch (e) {\n      this.logService.error(`Handled exception: ${e}`);\n    }\n  }\n\n  isSearching() {\n    return this.searchService.isSearchable(this.searchText);\n  }\n\n  isPaging() {\n    const searching = this.isSearching();\n    if (searching && this.didScroll) {\n      this.resetPaging();\n    }\n    return !searching && this.users && this.users.length > this.pageSize;\n  }\n\n  protected revokeWarningMessage(): string {\n    return this.i18nService.t(\"revokeUserConfirmation\");\n  }\n\n  protected getCheckedUsers() {\n    return this.users.filter((u) => (u as any).checked);\n  }\n\n  protected removeUser(user: UserType) {\n    let index = this.users.indexOf(user);\n    if (index > -1) {\n      this.users.splice(index, 1);\n      this.resetPaging();\n    }\n\n    index = this.allUsers.indexOf(user);\n    if (index > -1) {\n      this.allUsers.splice(index, 1);\n    }\n\n    if (this.statusMap.has(user.status)) {\n      index = this.statusMap.get(user.status).indexOf(user);\n      if (index > -1) {\n        this.statusMap.get(user.status).splice(index, 1);\n      }\n    }\n  }\n}\n","import { OrganizationUserUserDetailsResponse } from \"@bitwarden/common/abstractions/organization-user/responses\";\nimport { OrganizationUserStatusType } from \"@bitwarden/common/enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"@bitwarden/common/enums/organizationUserType\";\nimport { PermissionsApi } from \"@bitwarden/common/models/api/permissions.api\";\n\nimport { CollectionAccessSelectionView } from \"./collection-access-selection.view\";\n\nexport class OrganizationUserView {\n  id: string;\n  userId: string;\n  type: OrganizationUserType;\n  status: OrganizationUserStatusType;\n  accessAll: boolean;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  name: string;\n  email: string;\n  avatarColor: string;\n  twoFactorEnabled: boolean;\n  usesKeyConnector: boolean;\n\n  collections: CollectionAccessSelectionView[] = [];\n  groups: string[] = [];\n\n  groupNames: string[] = [];\n  collectionNames: string[] = [];\n\n  static fromResponse(response: OrganizationUserUserDetailsResponse): OrganizationUserView {\n    const view = Object.assign(new OrganizationUserView(), response) as OrganizationUserView;\n\n    if (response.collections != undefined) {\n      view.collections = response.collections.map((c) => new CollectionAccessSelectionView(c));\n    }\n\n    if (response.groups != undefined) {\n      view.groups = response.groups;\n    }\n\n    return view;\n  }\n}\n","type OrganizationUserBulkRequestEntry = {\n  id: string;\n  key: string;\n};\n\nexport class OrganizationUserBulkConfirmRequest {\n  keys: OrganizationUserBulkRequestEntry[];\n\n  constructor(keys: OrganizationUserBulkRequestEntry[]) {\n    this.keys = keys;\n  }\n}\n","<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"bulkTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable modal-lg\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h1 class=\"modal-title\" id=\"bulkTitle\">\n          {{ \"confirmUsers\" | i18n }}\n        </h1>\n        <button\n          type=\"button\"\n          class=\"close\"\n          data-dismiss=\"modal\"\n          appA11yTitle=\"{{ 'close' | i18n }}\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <div class=\"card-body text-center\" *ngIf=\"loading\">\n          <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n          {{ \"loading\" | i18n }}\n        </div>\n        <app-callout type=\"danger\" *ngIf=\"filteredUsers.length <= 0\">\n          {{ \"noSelectedUsersApplicable\" | i18n }}\n        </app-callout>\n        <app-callout type=\"error\" *ngIf=\"error\">\n          {{ error }}\n        </app-callout>\n        <ng-container *ngIf=\"!loading && !done\">\n          <p>\n            {{ \"fingerprintEnsureIntegrityVerify\" | i18n }}\n            <a href=\"https://bitwarden.com/help/fingerprint-phrase/\" target=\"_blank\" rel=\"noopener\">\n              {{ \"learnMore\" | i18n }}</a\n            >\n          </p>\n          <table class=\"table table-hover table-list\">\n            <thead>\n              <tr>\n                <th colspan=\"2\">{{ \"user\" | i18n }}</th>\n                <th>{{ \"fingerprint\" | i18n }}</th>\n              </tr>\n            </thead>\n            <tr *ngFor=\"let user of filteredUsers\">\n              <td width=\"30\">\n                <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n              </td>\n              <td>\n                {{ user.email }}\n                <small class=\"text-muted d-block\" *ngIf=\"user.name\">{{ user.name }}</small>\n              </td>\n              <td>\n                {{ fingerprints.get(user.id) }}\n              </td>\n            </tr>\n            <tr *ngFor=\"let user of excludedUsers\">\n              <td width=\"30\">\n                <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n              </td>\n              <td>\n                {{ user.email }}\n                <small class=\"text-muted d-block\" *ngIf=\"user.name\">{{ user.name }}</small>\n              </td>\n              <td>\n                {{ \"bulkFilteredMessage\" | i18n }}\n              </td>\n            </tr>\n          </table>\n        </ng-container>\n        <ng-container *ngIf=\"!loading && done\">\n          <table class=\"table table-hover table-list\">\n            <thead>\n              <tr>\n                <th colspan=\"2\">{{ \"user\" | i18n }}</th>\n                <th>{{ \"status\" | i18n }}</th>\n              </tr>\n            </thead>\n            <tr *ngFor=\"let user of filteredUsers\">\n              <td width=\"30\">\n                <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n              </td>\n              <td>\n                {{ user.email }}\n                <small class=\"text-muted d-block\" *ngIf=\"user.name\">{{ user.name }}</small>\n              </td>\n              <td *ngIf=\"statuses.has(user.id)\">\n                {{ statuses.get(user.id) }}\n              </td>\n              <td *ngIf=\"!statuses.has(user.id)\">\n                {{ \"bulkFilteredMessage\" | i18n }}\n              </td>\n            </tr>\n          </table>\n        </ng-container>\n      </div>\n      <div class=\"modal-footer\">\n        <button\n          type=\"submit\"\n          class=\"btn btn-primary btn-submit\"\n          *ngIf=\"!done\"\n          [disabled]=\"loading\"\n          (click)=\"submit()\"\n        >\n          <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n          <span>{{ \"confirm\" | i18n }}</span>\n        </button>\n        <button type=\"button\" class=\"btn btn-outline-secondary\" data-dismiss=\"modal\">\n          {{ \"close\" | i18n }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { OrganizationUserService } from \"@bitwarden/common/abstractions/organization-user/organization-user.service\";\nimport { OrganizationUserBulkConfirmRequest } from \"@bitwarden/common/abstractions/organization-user/requests\";\nimport { OrganizationUserStatusType } from \"@bitwarden/common/enums/organizationUserStatusType\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\n\nimport { BulkUserDetails } from \"./bulk-status.component\";\n\n@Component({\n  selector: \"app-bulk-confirm\",\n  templateUrl: \"bulk-confirm.component.html\",\n})\nexport class BulkConfirmComponent implements OnInit {\n  @Input() organizationId: string;\n  @Input() users: BulkUserDetails[];\n\n  excludedUsers: BulkUserDetails[];\n  filteredUsers: BulkUserDetails[];\n  publicKeys: Map<string, Uint8Array> = new Map();\n  fingerprints: Map<string, string> = new Map();\n  statuses: Map<string, string> = new Map();\n\n  loading = true;\n  done = false;\n  error: string;\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    private organizationUserService: OrganizationUserService,\n    private i18nService: I18nService\n  ) {}\n\n  async ngOnInit() {\n    this.excludedUsers = this.users.filter((u) => !this.isAccepted(u));\n    this.filteredUsers = this.users.filter((u) => this.isAccepted(u));\n\n    if (this.filteredUsers.length <= 0) {\n      this.done = true;\n    }\n\n    const response = await this.getPublicKeys();\n\n    for (const entry of response.data) {\n      const publicKey = Utils.fromB64ToArray(entry.key);\n      const fingerprint = await this.cryptoService.getFingerprint(entry.userId, publicKey.buffer);\n      if (fingerprint != null) {\n        this.publicKeys.set(entry.id, publicKey);\n        this.fingerprints.set(entry.id, fingerprint.join(\"-\"));\n      }\n    }\n\n    this.loading = false;\n  }\n\n  async submit() {\n    this.loading = true;\n    try {\n      const key = await this.getCryptoKey();\n      const userIdsWithKeys: any[] = [];\n      for (const user of this.filteredUsers) {\n        const publicKey = this.publicKeys.get(user.id);\n        if (publicKey == null) {\n          continue;\n        }\n        const encryptedKey = await this.cryptoService.rsaEncrypt(key.key, publicKey.buffer);\n        userIdsWithKeys.push({\n          id: user.id,\n          key: encryptedKey.encryptedString,\n        });\n      }\n      const response = await this.postConfirmRequest(userIdsWithKeys);\n\n      response.data.forEach((entry) => {\n        const error = entry.error !== \"\" ? entry.error : this.i18nService.t(\"bulkConfirmMessage\");\n        this.statuses.set(entry.id, error);\n      });\n\n      this.done = true;\n    } catch (e) {\n      this.error = e.message;\n    }\n    this.loading = false;\n  }\n\n  protected isAccepted(user: BulkUserDetails) {\n    return user.status === OrganizationUserStatusType.Accepted;\n  }\n\n  protected async getPublicKeys() {\n    return await this.organizationUserService.postOrganizationUsersPublicKey(\n      this.organizationId,\n      this.filteredUsers.map((user) => user.id)\n    );\n  }\n\n  protected getCryptoKey() {\n    return this.cryptoService.getOrgKey(this.organizationId);\n  }\n\n  protected async postConfirmRequest(userIdsWithKeys: any[]) {\n    const request = new OrganizationUserBulkConfirmRequest(userIdsWithKeys);\n    return await this.organizationUserService.postOrganizationUserBulkConfirm(\n      this.organizationId,\n      request\n    );\n  }\n}\n","<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"bulkTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable modal-lg\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h1 class=\"modal-title\" id=\"bulkTitle\">\n          {{ \"removeUsers\" | i18n }}\n        </h1>\n        <button\n          type=\"button\"\n          class=\"close\"\n          data-dismiss=\"modal\"\n          appA11yTitle=\"{{ 'close' | i18n }}\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <app-callout type=\"danger\" *ngIf=\"users.length <= 0\">\n          {{ \"noSelectedUsersApplicable\" | i18n }}\n        </app-callout>\n        <app-callout type=\"error\" *ngIf=\"error\">\n          {{ error }}\n        </app-callout>\n        <ng-container *ngIf=\"!done\">\n          <app-callout type=\"warning\" *ngIf=\"users.length > 0 && !error\">\n            {{ removeUsersWarning }}\n          </app-callout>\n          <table class=\"table table-hover table-list\">\n            <thead>\n              <tr>\n                <th colspan=\"2\">{{ \"user\" | i18n }}</th>\n              </tr>\n            </thead>\n            <tr *ngFor=\"let user of users\">\n              <td width=\"30\">\n                <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n              </td>\n              <td>\n                {{ user.email }}\n                <small class=\"text-muted d-block\" *ngIf=\"user.name\">{{ user.name }}</small>\n              </td>\n            </tr>\n          </table>\n        </ng-container>\n        <ng-container *ngIf=\"done\">\n          <table class=\"table table-hover table-list\">\n            <thead>\n              <tr>\n                <th colspan=\"2\">{{ \"user\" | i18n }}</th>\n                <th>{{ \"status\" | i18n }}</th>\n              </tr>\n            </thead>\n            <tr *ngFor=\"let user of users\">\n              <td width=\"30\">\n                <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n              </td>\n              <td>\n                {{ user.email }}\n                <small class=\"text-muted d-block\" *ngIf=\"user.name\">{{ user.name }}</small>\n              </td>\n              <td *ngIf=\"statuses.has(user.id)\">\n                {{ statuses.get(user.id) }}\n              </td>\n              <td *ngIf=\"!statuses.has(user.id)\">\n                {{ \"bulkFilteredMessage\" | i18n }}\n              </td>\n            </tr>\n          </table>\n        </ng-container>\n      </div>\n      <div class=\"modal-footer\">\n        <button\n          type=\"submit\"\n          class=\"btn btn-primary btn-submit\"\n          *ngIf=\"!done && users.length > 0\"\n          [disabled]=\"loading\"\n          (click)=\"submit()\"\n        >\n          <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n          <span>{{ \"removeUsers\" | i18n }}</span>\n        </button>\n        <button type=\"button\" class=\"btn btn-outline-secondary\" data-dismiss=\"modal\">\n          {{ \"close\" | i18n }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, Input } from \"@angular/core\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { OrganizationUserService } from \"@bitwarden/common/abstractions/organization-user/organization-user.service\";\n\nimport { BulkUserDetails } from \"./bulk-status.component\";\n\n@Component({\n  selector: \"app-bulk-remove\",\n  templateUrl: \"bulk-remove.component.html\",\n})\nexport class BulkRemoveComponent {\n  @Input() organizationId: string;\n  @Input() users: BulkUserDetails[];\n\n  statuses: Map<string, string> = new Map();\n\n  loading = false;\n  done = false;\n  error: string;\n\n  constructor(\n    protected apiService: ApiService,\n    protected i18nService: I18nService,\n    private organizationUserService: OrganizationUserService\n  ) {}\n\n  async submit() {\n    this.loading = true;\n    try {\n      const response = await this.deleteUsers();\n\n      response.data.forEach((entry) => {\n        const error = entry.error !== \"\" ? entry.error : this.i18nService.t(\"bulkRemovedMessage\");\n        this.statuses.set(entry.id, error);\n      });\n      this.done = true;\n    } catch (e) {\n      this.error = e.message;\n    }\n\n    this.loading = false;\n  }\n\n  protected async deleteUsers() {\n    return await this.organizationUserService.deleteManyOrganizationUsers(\n      this.organizationId,\n      this.users.map((user) => user.id)\n    );\n  }\n\n  protected get removeUsersWarning() {\n    return this.i18nService.t(\"removeOrgUsersConfirmation\");\n  }\n}\n","<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"bulkTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable modal-lg\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h1 class=\"modal-title\" id=\"bulkTitle\">\n          {{ bulkTitle }}\n        </h1>\n        <button\n          type=\"button\"\n          class=\"close\"\n          data-dismiss=\"modal\"\n          appA11yTitle=\"{{ 'close' | i18n }}\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <app-callout type=\"danger\" *ngIf=\"users.length <= 0\">\n          {{ \"noSelectedUsersApplicable\" | i18n }}\n        </app-callout>\n        <app-callout type=\"error\" *ngIf=\"error\">\n          {{ error }}\n        </app-callout>\n        <ng-container *ngIf=\"!done\">\n          <app-callout type=\"warning\" *ngIf=\"users.length > 0 && !error && isRevoking\">\n            {{ \"revokeUsersWarning\" | i18n }}\n          </app-callout>\n          <table class=\"table table-hover table-list\">\n            <thead>\n              <tr>\n                <th colspan=\"2\">{{ \"user\" | i18n }}</th>\n              </tr>\n            </thead>\n            <tr *ngFor=\"let user of users\">\n              <td width=\"30\">\n                <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n              </td>\n              <td>\n                {{ user.email }}\n                <small class=\"text-muted d-block\" *ngIf=\"user.name\">{{ user.name }}</small>\n              </td>\n            </tr>\n          </table>\n        </ng-container>\n        <ng-container *ngIf=\"done\">\n          <table class=\"table table-hover table-list\">\n            <thead>\n              <tr>\n                <th colspan=\"2\">{{ \"user\" | i18n }}</th>\n                <th>{{ \"status\" | i18n }}</th>\n              </tr>\n            </thead>\n            <tr *ngFor=\"let user of users\">\n              <td width=\"30\">\n                <bit-avatar [text]=\"user | userName\" [id]=\"user.id\" size=\"small\"></bit-avatar>\n              </td>\n              <td>\n                {{ user.email }}\n                <small class=\"text-muted d-block\" *ngIf=\"user.name\">{{ user.name }}</small>\n              </td>\n              <td *ngIf=\"statuses.has(user.id)\">\n                {{ statuses.get(user.id) }}\n              </td>\n              <td *ngIf=\"!statuses.has(user.id)\">\n                {{ \"bulkFilteredMessage\" | i18n }}\n              </td>\n            </tr>\n          </table>\n        </ng-container>\n      </div>\n      <div class=\"modal-footer\">\n        <button\n          type=\"submit\"\n          class=\"btn btn-primary btn-submit\"\n          *ngIf=\"!done && users.length > 0\"\n          [disabled]=\"loading\"\n          (click)=\"submit()\"\n        >\n          <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n          <span>{{ bulkTitle }}</span>\n        </button>\n        <button type=\"button\" class=\"btn btn-outline-secondary\" data-dismiss=\"modal\">\n          {{ \"close\" | i18n }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component } from \"@angular/core\";\n\nimport { ModalConfig } from \"@bitwarden/angular/services/modal.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { OrganizationUserService } from \"@bitwarden/common/abstractions/organization-user/organization-user.service\";\n\nimport { BulkUserDetails } from \"./bulk-status.component\";\n\n@Component({\n  selector: \"app-bulk-restore-revoke\",\n  templateUrl: \"bulk-restore-revoke.component.html\",\n})\nexport class BulkRestoreRevokeComponent {\n  isRevoking: boolean;\n  organizationId: string;\n  users: BulkUserDetails[];\n\n  statuses: Map<string, string> = new Map();\n\n  loading = false;\n  done = false;\n  error: string;\n\n  constructor(\n    protected i18nService: I18nService,\n    private organizationUserService: OrganizationUserService,\n    config: ModalConfig\n  ) {\n    this.isRevoking = config.data.isRevoking;\n    this.organizationId = config.data.organizationId;\n    this.users = config.data.users;\n  }\n\n  get bulkTitle() {\n    const titleKey = this.isRevoking ? \"revokeUsers\" : \"restoreUsers\";\n    return this.i18nService.t(titleKey);\n  }\n\n  async submit() {\n    this.loading = true;\n    try {\n      const response = await this.performBulkUserAction();\n\n      const bulkMessage = this.isRevoking ? \"bulkRevokedMessage\" : \"bulkRestoredMessage\";\n      response.data.forEach((entry) => {\n        const error = entry.error !== \"\" ? entry.error : this.i18nService.t(bulkMessage);\n        this.statuses.set(entry.id, error);\n      });\n      this.done = true;\n    } catch (e) {\n      this.error = e.message;\n    }\n\n    this.loading = false;\n  }\n\n  protected async performBulkUserAction() {\n    const userIds = this.users.map((user) => user.id);\n    if (this.isRevoking) {\n      return await this.organizationUserService.revokeManyOrganizationUsers(\n        this.organizationId,\n        userIds\n      );\n    } else {\n      return await this.organizationUserService.restoreManyOrganizationUsers(\n        this.organizationId,\n        userIds\n      );\n    }\n  }\n}\n","<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"bulkTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable modal-lg\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h1 class=\"modal-title\" id=\"bulkTitle\">\n          {{ \"bulkConfirmStatus\" | i18n }}\n        </h1>\n        <button\n          type=\"button\"\n          class=\"close\"\n          data-dismiss=\"modal\"\n          appA11yTitle=\"{{ 'close' | i18n }}\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <div class=\"card-body text-center\" *ngIf=\"loading\">\n          <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n          {{ \"loading\" | i18n }}\n        </div>\n        <table class=\"table table-hover table-list\" *ngIf=\"!loading\">\n          <thead>\n            <tr>\n              <th colspan=\"2\">{{ \"user\" | i18n }}</th>\n              <th>{{ \"status\" | i18n }}</th>\n            </tr>\n          </thead>\n          <tr *ngFor=\"let item of users\">\n            <td width=\"30\">\n              <bit-avatar\n                [text]=\"item.user | userName\"\n                [id]=\"item.user.id\"\n                size=\"small\"\n              ></bit-avatar>\n            </td>\n            <td>\n              {{ item.user.email }}\n              <small class=\"text-muted d-block\" *ngIf=\"item.user.name\">{{ item.user.name }}</small>\n            </td>\n            <td class=\"text-danger\" *ngIf=\"item.error\">\n              {{ item.message }}\n            </td>\n            <td *ngIf=\"!item.error\">\n              {{ item.message }}\n            </td>\n          </tr>\n        </table>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"button\" class=\"btn btn-outline-secondary\" data-dismiss=\"modal\">\n          {{ \"close\" | i18n }}\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component } from \"@angular/core\";\n\nimport { OrganizationUserStatusType } from \"@bitwarden/common/enums/organizationUserStatusType\";\nimport { ProviderUserStatusType } from \"@bitwarden/common/enums/providerUserStatusType\";\n\nexport interface BulkUserDetails {\n  id: string;\n  name: string;\n  email: string;\n  status: OrganizationUserStatusType | ProviderUserStatusType;\n}\n\ntype BulkStatusEntry = {\n  user: BulkUserDetails;\n  error: boolean;\n  message: string;\n};\n\n@Component({\n  selector: \"app-bulk-status\",\n  templateUrl: \"bulk-status.component.html\",\n})\nexport class BulkStatusComponent {\n  users: BulkStatusEntry[];\n  loading = false;\n}\n","<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"resetPasswordTitle\">\n  <div class=\"modal-dialog\" role=\"document\">\n    <form class=\"modal-content\" #form (ngSubmit)=\"submit()\" [appApiAction]=\"formPromise\">\n      <div class=\"modal-header\">\n        <h1 class=\"modal-title\" id=\"resetPasswordTitle\">\n          {{ \"resetPassword\" | i18n }}\n          <small class=\"text-muted\" *ngIf=\"name\">{{ name }}</small>\n        </h1>\n        <button\n          type=\"button\"\n          class=\"close\"\n          data-dismiss=\"modal\"\n          appA11yTitle=\"{{ 'close' | i18n }}\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <app-callout type=\"warning\"\n          >{{ \"resetPasswordLoggedOutWarning\" | i18n: loggedOutWarningName }}\n        </app-callout>\n        <app-callout\n          type=\"info\"\n          [enforcedPolicyOptions]=\"enforcedPolicyOptions\"\n          enforcedPolicyMessage=\"{{ 'resetPasswordMasterPasswordPolicyInEffect' | i18n }}\"\n          *ngIf=\"enforcedPolicyOptions\"\n        >\n        </app-callout>\n        <div class=\"row\">\n          <div class=\"col form-group\">\n            <div class=\"d-flex\">\n              <label for=\"newPassword\">{{ \"newPassword\" | i18n }}</label>\n              <div class=\"ml-auto d-flex\">\n                <a\n                  href=\"#\"\n                  class=\"d-block mr-2 bwi-icon-above-input\"\n                  appStopClick\n                  appA11yTitle=\"{{ 'generatePassword' | i18n }}\"\n                  (click)=\"generatePassword()\"\n                >\n                  <i class=\"bwi bwi-lg bwi-fw bwi-refresh\" aria-hidden=\"true\"></i>\n                </a>\n              </div>\n            </div>\n            <div class=\"input-group mb-1\">\n              <input\n                id=\"newPassword\"\n                class=\"form-control text-monospace\"\n                appAutofocus\n                type=\"{{ showPassword ? 'text' : 'password' }}\"\n                name=\"NewPassword\"\n                [(ngModel)]=\"newPassword\"\n                required\n                appInputVerbatim\n                autocomplete=\"new-password\"\n              />\n              <div class=\"input-group-append\">\n                <button\n                  type=\"button\"\n                  class=\"btn btn-outline-secondary\"\n                  appA11yTitle=\"{{ 'toggleVisibility' | i18n }}\"\n                  (click)=\"togglePassword()\"\n                >\n                  <i\n                    class=\"bwi bwi-lg\"\n                    aria-hidden=\"true\"\n                    [ngClass]=\"{ 'bwi-eye': !showPassword, 'bwi-eye-slash': showPassword }\"\n                  ></i>\n                </button>\n                <button\n                  type=\"button\"\n                  class=\"btn btn-outline-secondary\"\n                  appA11yTitle=\"{{ 'copyPassword' | i18n }}\"\n                  (click)=\"copy(newPassword)\"\n                >\n                  <i class=\"bwi bwi-lg bwi-clone\" aria-hidden=\"true\"></i>\n                </button>\n              </div>\n            </div>\n            <app-password-strength\n              [password]=\"newPassword\"\n              [email]=\"email\"\n              [showText]=\"true\"\n              (passwordStrengthResult)=\"getStrengthResult($event)\"\n            >\n            </app-password-strength>\n          </div>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"submit\" class=\"btn btn-primary btn-submit\" [disabled]=\"form.loading\">\n          <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n          <span>{{ \"save\" | i18n }}</span>\n        </button>\n        <button type=\"button\" class=\"btn btn-outline-secondary\" data-dismiss=\"modal\">\n          {{ \"cancel\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n} from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\nimport zxcvbn from \"zxcvbn\";\n\nimport { PasswordStrengthComponent } from \"@bitwarden/angular/shared/components/password-strength/password-strength.component\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { OrganizationUserService } from \"@bitwarden/common/abstractions/organization-user/organization-user.service\";\nimport { OrganizationUserResetPasswordRequest } from \"@bitwarden/common/abstractions/organization-user/requests\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { MasterPasswordPolicyOptions } from \"@bitwarden/common/models/domain/master-password-policy-options\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { PasswordGenerationServiceAbstraction } from \"@bitwarden/common/tools/generator/password\";\n\n@Component({\n  selector: \"app-reset-password\",\n  templateUrl: \"reset-password.component.html\",\n})\nexport class ResetPasswordComponent implements OnInit, OnDestroy {\n  @Input() name: string;\n  @Input() email: string;\n  @Input() id: string;\n  @Input() organizationId: string;\n  @Output() onPasswordReset = new EventEmitter();\n  @ViewChild(PasswordStrengthComponent) passwordStrengthComponent: PasswordStrengthComponent;\n\n  enforcedPolicyOptions: MasterPasswordPolicyOptions;\n  newPassword: string = null;\n  showPassword = false;\n  passwordStrengthResult: zxcvbn.ZXCVBNResult;\n  formPromise: Promise<any>;\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private passwordGenerationService: PasswordGenerationServiceAbstraction,\n    private policyService: PolicyService,\n    private cryptoService: CryptoService,\n    private logService: LogService,\n    private organizationUserService: OrganizationUserService\n  ) {}\n\n  async ngOnInit() {\n    this.policyService\n      .masterPasswordPolicyOptions$()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(\n        (enforcedPasswordPolicyOptions) =>\n          (this.enforcedPolicyOptions = enforcedPasswordPolicyOptions)\n      );\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  get loggedOutWarningName() {\n    return this.name != null ? this.name : this.i18nService.t(\"thisUser\");\n  }\n\n  async generatePassword() {\n    const options = (await this.passwordGenerationService.getOptions())?.[0] ?? {};\n    this.newPassword = await this.passwordGenerationService.generatePassword(options);\n    this.passwordStrengthComponent.updatePasswordStrength(this.newPassword);\n  }\n\n  togglePassword() {\n    this.showPassword = !this.showPassword;\n    document.getElementById(\"newPassword\").focus();\n  }\n\n  copy(value: string) {\n    if (value == null) {\n      return;\n    }\n\n    this.platformUtilsService.copyToClipboard(value, { window: window });\n    this.platformUtilsService.showToast(\n      \"info\",\n      null,\n      this.i18nService.t(\"valueCopied\", this.i18nService.t(\"password\"))\n    );\n  }\n\n  async submit() {\n    // Validation\n    if (this.newPassword == null || this.newPassword === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"masterPasswordRequired\")\n      );\n      return false;\n    }\n\n    if (this.newPassword.length < Utils.minimumPasswordLength) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"masterPasswordMinlength\", Utils.minimumPasswordLength)\n      );\n      return false;\n    }\n\n    if (\n      this.enforcedPolicyOptions != null &&\n      !this.policyService.evaluateMasterPassword(\n        this.passwordStrengthResult.score,\n        this.newPassword,\n        this.enforcedPolicyOptions\n      )\n    ) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"masterPasswordPolicyRequirementsNotMet\")\n      );\n      return;\n    }\n\n    if (this.passwordStrengthResult.score < 3) {\n      const result = await this.platformUtilsService.showDialog(\n        this.i18nService.t(\"weakMasterPasswordDesc\"),\n        this.i18nService.t(\"weakMasterPassword\"),\n        this.i18nService.t(\"yes\"),\n        this.i18nService.t(\"no\"),\n        \"warning\"\n      );\n      if (!result) {\n        return false;\n      }\n    }\n\n    // Get user Information (kdf type, kdf iterations, resetPasswordKey, private key) and change password\n    try {\n      this.formPromise = this.organizationUserService\n        .getOrganizationUserResetPasswordDetails(this.organizationId, this.id)\n        .then(async (response) => {\n          if (response == null) {\n            throw new Error(this.i18nService.t(\"resetPasswordDetailsError\"));\n          }\n\n          const kdfType = response.kdf;\n          const kdfIterations = response.kdfIterations;\n          const kdfMemory = response.kdfMemory;\n          const kdfParallelism = response.kdfParallelism;\n          const resetPasswordKey = response.resetPasswordKey;\n          const encryptedPrivateKey = response.encryptedPrivateKey;\n\n          // Decrypt Organization's encrypted Private Key with org key\n          const orgSymKey = await this.cryptoService.getOrgKey(this.organizationId);\n          const decPrivateKey = await this.cryptoService.decryptToBytes(\n            new EncString(encryptedPrivateKey),\n            orgSymKey\n          );\n\n          // Decrypt User's Reset Password Key to get EncKey\n          const decValue = await this.cryptoService.rsaDecrypt(resetPasswordKey, decPrivateKey);\n          const userEncKey = new SymmetricCryptoKey(decValue);\n\n          // Create new key and hash new password\n          const newKey = await this.cryptoService.makeKey(\n            this.newPassword,\n            this.email.trim().toLowerCase(),\n            kdfType,\n            new KdfConfig(kdfIterations, kdfMemory, kdfParallelism)\n          );\n          const newPasswordHash = await this.cryptoService.hashPassword(this.newPassword, newKey);\n\n          // Create new encKey for the User\n          const newEncKey = await this.cryptoService.remakeEncKey(newKey, userEncKey);\n\n          // Create request\n          const request = new OrganizationUserResetPasswordRequest();\n          request.key = newEncKey[1].encryptedString;\n          request.newMasterPasswordHash = newPasswordHash;\n\n          // Change user's password\n          return this.organizationUserService.putOrganizationUserResetPassword(\n            this.organizationId,\n            this.id,\n            request\n          );\n        });\n\n      await this.formPromise;\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"resetPasswordSuccess\")\n      );\n      this.onPasswordReset.emit();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  getStrengthResult(result: zxcvbn.ZXCVBNResult) {\n    this.passwordStrengthResult = result;\n  }\n}\n","import { Component, EventEmitter, HostBinding, Input, Output } from \"@angular/core\";\n\nlet nextId = 0;\n\n@Component({\n  selector: \"bit-toggle-group\",\n  templateUrl: \"./toggle-group.component.html\",\n  preserveWhitespaces: false,\n})\nexport class ToggleGroupComponent<TValue = unknown> {\n  private id = nextId++;\n  name = `bit-toggle-group-${this.id}`;\n\n  @Input() selected?: TValue;\n  @Output() selectedChange = new EventEmitter<TValue>();\n\n  @HostBinding(\"attr.role\") role = \"radiogroup\";\n  @HostBinding(\"class\") classList = [\"tw-flex\"];\n\n  onInputInteraction(value: TValue) {\n    this.selected = value;\n    this.selectedChange.emit(value);\n  }\n}\n","<ng-content></ng-content>\n","import { Component, HostBinding, Input } from \"@angular/core\";\n\nimport { ToggleGroupComponent } from \"./toggle-group.component\";\n\nlet nextId = 0;\n\n@Component({\n  selector: \"bit-toggle\",\n  templateUrl: \"./toggle.component.html\",\n  preserveWhitespaces: false,\n})\nexport class ToggleComponent<TValue> {\n  id = nextId++;\n\n  @Input() value?: TValue;\n\n  constructor(private groupComponent: ToggleGroupComponent<TValue>) {}\n\n  @HostBinding(\"tabIndex\") tabIndex = \"-1\";\n  @HostBinding(\"class\") classList = [\"tw-group\"];\n\n  get name() {\n    return this.groupComponent.name;\n  }\n\n  get selected() {\n    return this.groupComponent.selected === this.value;\n  }\n\n  get inputClasses() {\n    return [\"tw-peer\", \"tw-appearance-none\", \"tw-outline-none\"];\n  }\n\n  get labelClasses() {\n    return [\n      \"!tw-font-semibold\",\n      \"tw-transition\",\n      \"tw-text-center\",\n      \"tw-border-text-muted\",\n      \"!tw-text-muted\",\n      \"tw-border-solid\",\n      \"tw-border-y\",\n      \"tw-border-r\",\n      \"tw-border-l-0\",\n      \"tw-cursor-pointer\",\n      \"group-first-of-type:tw-border-l\",\n      \"group-first-of-type:tw-rounded-l\",\n      \"group-last-of-type:tw-rounded-r\",\n\n      \"peer-focus:tw-outline-none\",\n      \"peer-focus:tw-ring\",\n      \"peer-focus:tw-ring-offset-2\",\n      \"peer-focus:tw-ring-primary-500\",\n      \"peer-focus:tw-z-10\",\n      \"peer-focus:tw-bg-primary-500\",\n      \"peer-focus:tw-border-primary-500\",\n      \"peer-focus:!tw-text-contrast\",\n\n      \"hover:tw-no-underline\",\n      \"hover:tw-bg-text-muted\",\n      \"hover:tw-border-text-muted\",\n      \"hover:!tw-text-contrast\",\n\n      \"peer-checked:tw-bg-primary-500\",\n      \"peer-checked:tw-border-primary-500\",\n      \"peer-checked:!tw-text-contrast\",\n      \"tw-py-1.5\",\n      \"tw-px-3\",\n\n      // Fix for bootstrap styles that add bottom margin\n      \"!tw-mb-0\",\n\n      // Fix for badge being pushed slightly lower when inside a button.\n      // Insipired by bootstrap, which does the same.\n      \"[&>[bitBadge]]:tw-relative\",\n      \"[&>[bitBadge]]:tw--top-px\",\n    ];\n  }\n\n  onInputInteraction() {\n    this.groupComponent.onInputInteraction(this.value);\n  }\n}\n","<input\n  type=\"radio\"\n  id=\"bit-toggle-{{ id }}\"\n  [name]=\"name\"\n  [ngClass]=\"inputClasses\"\n  [checked]=\"selected\"\n  (change)=\"onInputInteraction()\"\n/>\n<label for=\"bit-toggle-{{ id }}\" [ngClass]=\"labelClasses\">\n  <ng-content></ng-content>\n</label>\n","import { Component, Input } from \"@angular/core\";\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\nlet nextId = 0;\n\n@Component({\n  selector: \"app-search-input\",\n  templateUrl: \"./search-input.component.html\",\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: SearchInputComponent,\n    },\n  ],\n})\nexport class SearchInputComponent implements ControlValueAccessor {\n  private notifyOnChange: (v: string) => void;\n  private notifyOnTouch: () => void;\n\n  protected id = `search-id-${nextId++}`;\n  protected searchText: string;\n\n  @Input() disabled: boolean;\n  @Input() placeholder: string;\n\n  onChange(searchText: string) {\n    if (this.notifyOnChange != undefined) {\n      this.notifyOnChange(searchText);\n    }\n  }\n\n  onTouch() {\n    if (this.notifyOnTouch != undefined) {\n      this.notifyOnTouch();\n    }\n  }\n\n  registerOnChange(fn: (v: string) => void): void {\n    this.notifyOnChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.notifyOnTouch = fn;\n  }\n\n  writeValue(searchText: string): void {\n    this.searchText = searchText;\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","<label class=\"tw-sr-only\" [for]=\"id\">{{ \"search\" | i18n }}</label>\n<div class=\"tw-relative tw-flex tw-items-center\">\n  <label\n    [for]=\"id\"\n    aria-hidden=\"true\"\n    class=\"tw-absolute tw-left-2 tw-z-20 !tw-mb-0 tw-cursor-text\"\n  >\n    <i class=\"bwi bwi-search bwi-fw tw-text-muted\"></i>\n  </label>\n  <input\n    bitInput\n    type=\"search\"\n    [id]=\"id\"\n    [placeholder]=\"placeholder ?? ('search' | i18n)\"\n    class=\"tw-rounded-l tw-pl-9\"\n    [ngModel]=\"searchText\"\n    (ngModelChange)=\"onChange($event)\"\n    (blur)=\"onTouch()\"\n    [disabled]=\"disabled\"\n  />\n</div>\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<div class=\"container page-content\">\n  <div class=\"tw-mb-4 tw-flex tw-flex-col tw-space-y-4\">\n    <h1>{{ \"members\" | i18n }}</h1>\n    <div class=\"tw-flex tw-items-center tw-justify-end tw-space-x-3\">\n      <bit-toggle-group\n        [selected]=\"status\"\n        (selectedChange)=\"filter($event)\"\n        [attr.aria-label]=\"'memberStatusFilter' | i18n\"\n      >\n        <bit-toggle [value]=\"null\">\n          {{ \"all\" | i18n }} <span bitBadge badgeType=\"info\" *ngIf=\"allCount\">{{ allCount }}</span>\n        </bit-toggle>\n\n        <bit-toggle [value]=\"userStatusType.Invited\">\n          {{ \"invited\" | i18n }}\n          <span bitBadge badgeType=\"info\" *ngIf=\"invitedCount\">{{ invitedCount }}</span>\n        </bit-toggle>\n\n        <bit-toggle [value]=\"userStatusType.Accepted\">\n          {{ \"needsConfirmation\" | i18n }}\n          <span bitBadge badgeType=\"info\" *ngIf=\"acceptedCount\">{{ acceptedCount }}</span>\n        </bit-toggle>\n\n        <bit-toggle [value]=\"userStatusType.Revoked\">\n          {{ \"revoked\" | i18n }}\n          <span bitBadge badgeType=\"info\" *ngIf=\"revokedCount\">{{ revokedCount }}</span>\n        </bit-toggle>\n      </bit-toggle-group>\n\n      <app-search-input\n        class=\"tw-grow\"\n        [(ngModel)]=\"searchText\"\n        [placeholder]=\"'searchMembers' | i18n\"\n      >\n      </app-search-input>\n\n      <button type=\"button\" bitButton buttonType=\"primary\" (click)=\"invite()\">\n        <i class=\"bwi bwi-plus bwi-fw\" aria-hidden=\"true\"></i>\n        {{ \"inviteMember\" | i18n }}\n      </button>\n    </div>\n  </div>\n  <ng-container *ngIf=\"loading\">\n    <i\n      class=\"bwi bwi-spinner bwi-spin text-muted\"\n      title=\"{{ 'loading' | i18n }}\"\n      aria-hidden=\"true\"\n    ></i>\n    <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n  </ng-container>\n  <ng-container\n    *ngIf=\"\n      !loading &&\n      (isPaging() ? pagedUsers : (users | search: searchText:'name':'email':'id')) as searchedUsers\n    \"\n  >\n    <p *ngIf=\"!searchedUsers.length\">{{ \"noMembersInList\" | i18n }}</p>\n    <ng-container *ngIf=\"searchedUsers.length\">\n      <app-callout\n        type=\"info\"\n        title=\"{{ 'confirmUsers' | i18n }}\"\n        icon=\"bwi bwi-check-circle\"\n        *ngIf=\"showConfirmUsers\"\n      >\n        {{ \"usersNeedConfirmed\" | i18n }}\n      </app-callout>\n      <bit-table\n        infinite-scroll\n        [infiniteScrollDistance]=\"1\"\n        [infiniteScrollDisabled]=\"!isPaging()\"\n        (scrolled)=\"loadMore()\"\n      >\n        <ng-container header>\n          <tr>\n            <th bitCell class=\"tw-w-20\">\n              <input\n                type=\"checkbox\"\n                bitCheckbox\n                class=\"tw-mr-1\"\n                (change)=\"selectAll($any($event.target).checked)\"\n                id=\"selectAll\"\n              />\n              <label class=\"tw-mb-0 !tw-font-bold !tw-text-muted\" for=\"selectAll\">{{\n                \"all\" | i18n\n              }}</label>\n            </th>\n            <th bitCell>{{ \"name\" | i18n }}</th>\n            <th bitCell>{{ (organization.useGroups ? \"groups\" : \"collections\") | i18n }}</th>\n            <th bitCell>{{ \"role\" | i18n }}</th>\n            <th bitCell>{{ \"policies\" | i18n }}</th>\n            <th bitCell class=\"tw-w-10\">\n              <button\n                [bitMenuTriggerFor]=\"headerMenu\"\n                type=\"button\"\n                bitIconButton=\"bwi-ellipsis-v\"\n                size=\"small\"\n                appA11yTitle=\"{{ 'options' | i18n }}\"\n              ></button>\n\n              <bit-menu #headerMenu>\n                <button type=\"button\" bitMenuItem (click)=\"bulkReinvite()\">\n                  <i class=\"bwi bwi-fw bwi-envelope\" aria-hidden=\"true\"></i>\n                  {{ \"reinviteSelected\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"bulkConfirm()\"\n                  *ngIf=\"showBulkConfirmUsers\"\n                >\n                  <span class=\"tw-text-success\">\n                    <i class=\"bwi bwi-fw bwi-check\" aria-hidden=\"true\"></i>\n                    {{ \"confirmSelected\" | i18n }}\n                  </span>\n                </button>\n                <button type=\"button\" bitMenuItem (click)=\"bulkRestore()\">\n                  <i class=\"bwi bwi-fw bwi-plus-circle\" aria-hidden=\"true\"></i>\n                  {{ \"restoreAccess\" | i18n }}\n                </button>\n                <button type=\"button\" bitMenuItem (click)=\"bulkRevoke()\">\n                  <i class=\"bwi bwi-fw bwi-minus-circle\" aria-hidden=\"true\"></i>\n                  {{ \"revokeAccess\" | i18n }}\n                </button>\n                <button type=\"button\" bitMenuItem (click)=\"bulkRemove()\">\n                  <span class=\"tw-text-danger\">\n                    <i aria-hidden=\"true\" class=\"bwi bwi-close\"></i>\n                    {{ \"remove\" | i18n }}\n                  </span>\n                </button>\n              </bit-menu>\n            </th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr bitRow *ngFor=\"let u of searchedUsers\" alignContent=\"middle\">\n            <td bitCell (click)=\"checkUser(u)\">\n              <input type=\"checkbox\" bitCheckbox [(ngModel)]=\"$any(u).checked\" />\n            </td>\n            <td bitCell (click)=\"edit(u)\" class=\"tw-cursor-pointer\">\n              <div class=\"tw-flex tw-items-center\">\n                <bit-avatar\n                  size=\"small\"\n                  [text]=\"u | userName\"\n                  [id]=\"u.userId\"\n                  [color]=\"u.avatarColor\"\n                  class=\"tw-mr-3\"\n                ></bit-avatar>\n                <div class=\"tw-flex tw-flex-col\">\n                  <div>\n                    <button bitLink>\n                      {{ u.name ?? u.email }}\n                    </button>\n                    <span\n                      bitBadge\n                      class=\"tw-text-xs\"\n                      badgeType=\"secondary\"\n                      *ngIf=\"u.status === userStatusType.Invited\"\n                      >{{ \"invited\" | i18n }}</span\n                    >\n                    <span\n                      bitBadge\n                      class=\"tw-text-xs\"\n                      badgeType=\"warning\"\n                      *ngIf=\"u.status === userStatusType.Accepted\"\n                      >{{ \"needsConfirmation\" | i18n }}</span\n                    >\n                    <span\n                      bitBadge\n                      class=\"tw-text-xs\"\n                      badgeType=\"secondary\"\n                      *ngIf=\"u.status === userStatusType.Revoked\"\n                      >{{ \"revoked\" | i18n }}</span\n                    >\n                  </div>\n                  <div class=\"tw-text-sm tw-text-muted\" *ngIf=\"u.name\">\n                    {{ u.email }}\n                  </div>\n                </div>\n              </div>\n            </td>\n\n            <td\n              bitCell\n              (click)=\"edit(u, organization.useGroups ? memberTab.Groups : memberTab.Collections)\"\n              class=\"tw-cursor-pointer\"\n            >\n              <bit-badge-list\n                *ngIf=\"organization.useGroups || !u.accessAll\"\n                [items]=\"organization.useGroups ? u.groupNames : u.collectionNames\"\n                [maxItems]=\"3\"\n                badgeType=\"secondary\"\n              ></bit-badge-list>\n              <span *ngIf=\"!organization.useGroups && u.accessAll\">{{ \"all\" | i18n }}</span>\n            </td>\n\n            <td\n              bitCell\n              (click)=\"edit(u, memberTab.Role)\"\n              class=\"tw-cursor-pointer tw-text-sm tw-text-muted\"\n            >\n              {{ u.type | userType }}\n            </td>\n\n            <td bitCell class=\"tw-text-muted\">\n              <ng-container *ngIf=\"u.twoFactorEnabled\">\n                <i\n                  class=\"bwi bwi-lock\"\n                  title=\"{{ 'userUsingTwoStep' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"tw-sr-only\">{{ \"userUsingTwoStep\" | i18n }}</span>\n              </ng-container>\n              <ng-container *ngIf=\"showEnrolledStatus($any(u))\">\n                <i\n                  class=\"bwi bwi-key\"\n                  title=\"{{ 'enrolledPasswordReset' | i18n }}\"\n                  aria-hidden=\"true\"\n                ></i>\n                <span class=\"tw-sr-only\">{{ \"enrolledPasswordReset\" | i18n }}</span>\n              </ng-container>\n            </td>\n            <td bitCell>\n              <button\n                [bitMenuTriggerFor]=\"rowMenu\"\n                type=\"button\"\n                bitIconButton=\"bwi-ellipsis-v\"\n                size=\"small\"\n                appA11yTitle=\"{{ 'options' | i18n }}\"\n              ></button>\n\n              <bit-menu #rowMenu>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"reinvite(u)\"\n                  *ngIf=\"u.status === userStatusType.Invited\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-envelope\"></i>\n                  {{ \"resendInvitation\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"confirm(u)\"\n                  *ngIf=\"u.status === userStatusType.Accepted\"\n                >\n                  <span class=\"tw-text-success\">\n                    <i aria-hidden=\"true\" class=\"bwi bwi-check\"></i> {{ \"confirm\" | i18n }}\n                  </span>\n                </button>\n                <bit-menu-divider\n                  *ngIf=\"\n                    u.status === userStatusType.Accepted || u.status === userStatusType.Invited\n                  \"\n                ></bit-menu-divider>\n                <button type=\"button\" bitMenuItem (click)=\"edit(u, memberTab.Role)\">\n                  <i aria-hidden=\"true\" class=\"bwi bwi-user\"></i> {{ \"memberRole\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"edit(u, memberTab.Groups)\"\n                  *ngIf=\"organization.useGroups\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-users\"></i> {{ \"groups\" | i18n }}\n                </button>\n                <button type=\"button\" bitMenuItem (click)=\"edit(u, memberTab.Collections)\">\n                  <i aria-hidden=\"true\" class=\"bwi bwi-collection\"></i> {{ \"collections\" | i18n }}\n                </button>\n                <bit-menu-divider></bit-menu-divider>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"events(u)\"\n                  *ngIf=\"organization.useEvents && u.status === userStatusType.Confirmed\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-file-text\"></i> {{ \"eventLogs\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"resetPassword(u)\"\n                  *ngIf=\"allowResetPassword(u)\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-key\"></i> {{ \"resetPassword\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"restore(u)\"\n                  *ngIf=\"u.status === userStatusType.Revoked\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-plus-circle\"></i>\n                  {{ \"restoreAccess\" | i18n }}\n                </button>\n                <button\n                  type=\"button\"\n                  bitMenuItem\n                  (click)=\"revoke(u)\"\n                  *ngIf=\"u.status !== userStatusType.Revoked\"\n                >\n                  <i aria-hidden=\"true\" class=\"bwi bwi-minus-circle\"></i>\n                  {{ \"revokeAccess\" | i18n }}\n                </button>\n                <button type=\"button\" bitMenuItem (click)=\"remove(u)\">\n                  <span class=\"tw-text-danger\">\n                    <i aria-hidden=\"true\" class=\"bwi bwi-close\"></i> {{ \"remove\" | i18n }}\n                  </span>\n                </button>\n              </bit-menu>\n            </td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </ng-container>\n  </ng-container>\n  <ng-template #addEdit></ng-template>\n  <ng-template #groupsTemplate></ng-template>\n  <ng-template #eventsTemplate></ng-template>\n  <ng-template #confirmTemplate></ng-template>\n  <ng-template #resetPasswordTemplate></ng-template>\n  <ng-template #bulkStatusTemplate></ng-template>\n  <ng-template #bulkConfirmTemplate></ng-template>\n  <ng-template #bulkRemoveTemplate></ng-template>\n</div>\n","import { Component, OnDestroy, OnInit, ViewChild, ViewContainerRef } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport {\n  combineLatest,\n  concatMap,\n  firstValueFrom,\n  from,\n  lastValueFrom,\n  map,\n  shareReplay,\n  Subject,\n  switchMap,\n  takeUntil,\n} from \"rxjs\";\n\nimport { SearchPipe } from \"@bitwarden/angular/pipes/search.pipe\";\nimport { UserNamePipe } from \"@bitwarden/angular/pipes/user-name.pipe\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CollectionService } from \"@bitwarden/common/abstractions/collection.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { OrganizationUserService } from \"@bitwarden/common/abstractions/organization-user/organization-user.service\";\nimport { OrganizationUserConfirmRequest } from \"@bitwarden/common/abstractions/organization-user/requests\";\nimport {\n  OrganizationUserBulkResponse,\n  OrganizationUserUserDetailsResponse,\n} from \"@bitwarden/common/abstractions/organization-user/responses\";\nimport { OrganizationApiServiceAbstraction } from \"@bitwarden/common/abstractions/organization/organization-api.service.abstraction\";\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization/organization.service.abstraction\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyApiServiceAbstraction as PolicyApiService } from \"@bitwarden/common/abstractions/policy/policy-api.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { SearchService } from \"@bitwarden/common/abstractions/search.service\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\nimport { OrganizationUserStatusType } from \"@bitwarden/common/enums/organizationUserStatusType\";\nimport { OrganizationUserType } from \"@bitwarden/common/enums/organizationUserType\";\nimport { PolicyType } from \"@bitwarden/common/enums/policyType\";\nimport { ProductType } from \"@bitwarden/common/enums/productType\";\nimport { CollectionData } from \"@bitwarden/common/models/data/collection.data\";\nimport { Collection } from \"@bitwarden/common/models/domain/collection\";\nimport { Organization } from \"@bitwarden/common/models/domain/organization\";\nimport { OrganizationKeysRequest } from \"@bitwarden/common/models/request/organization-keys.request\";\nimport { CollectionDetailsResponse } from \"@bitwarden/common/models/response/collection.response\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport {\n  DialogService,\n  SimpleDialogCloseType,\n  SimpleDialogOptions,\n  SimpleDialogType,\n} from \"@bitwarden/components\";\n\nimport { BasePeopleComponent } from \"../../common/base.people.component\";\nimport { GroupService } from \"../core\";\nimport { OrganizationUserView } from \"../core/views/organization-user.view\";\nimport { EntityEventsComponent } from \"../manage/entity-events.component\";\n\nimport { BulkConfirmComponent } from \"./components/bulk/bulk-confirm.component\";\nimport { BulkRemoveComponent } from \"./components/bulk/bulk-remove.component\";\nimport { BulkRestoreRevokeComponent } from \"./components/bulk/bulk-restore-revoke.component\";\nimport { BulkStatusComponent } from \"./components/bulk/bulk-status.component\";\nimport {\n  MemberDialogResult,\n  MemberDialogTab,\n  openUserAddEditDialog,\n} from \"./components/member-dialog\";\nimport { ResetPasswordComponent } from \"./components/reset-password.component\";\n\n@Component({\n  selector: \"app-org-people\",\n  templateUrl: \"people.component.html\",\n})\nexport class PeopleComponent\n  extends BasePeopleComponent<OrganizationUserView>\n  implements OnInit, OnDestroy\n{\n  @ViewChild(\"groupsTemplate\", { read: ViewContainerRef, static: true })\n  groupsModalRef: ViewContainerRef;\n  @ViewChild(\"eventsTemplate\", { read: ViewContainerRef, static: true })\n  eventsModalRef: ViewContainerRef;\n  @ViewChild(\"confirmTemplate\", { read: ViewContainerRef, static: true })\n  confirmModalRef: ViewContainerRef;\n  @ViewChild(\"resetPasswordTemplate\", { read: ViewContainerRef, static: true })\n  resetPasswordModalRef: ViewContainerRef;\n  @ViewChild(\"bulkStatusTemplate\", { read: ViewContainerRef, static: true })\n  bulkStatusModalRef: ViewContainerRef;\n  @ViewChild(\"bulkConfirmTemplate\", { read: ViewContainerRef, static: true })\n  bulkConfirmModalRef: ViewContainerRef;\n  @ViewChild(\"bulkRemoveTemplate\", { read: ViewContainerRef, static: true })\n  bulkRemoveModalRef: ViewContainerRef;\n\n  userType = OrganizationUserType;\n  userStatusType = OrganizationUserStatusType;\n  memberTab = MemberDialogTab;\n\n  organization: Organization;\n  status: OrganizationUserStatusType = null;\n  orgResetPasswordPolicyEnabled = false;\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    apiService: ApiService,\n    private route: ActivatedRoute,\n    i18nService: I18nService,\n    modalService: ModalService,\n    platformUtilsService: PlatformUtilsService,\n    cryptoService: CryptoService,\n    searchService: SearchService,\n    validationService: ValidationService,\n    private policyService: PolicyService,\n    private policyApiService: PolicyApiService,\n    logService: LogService,\n    searchPipe: SearchPipe,\n    userNamePipe: UserNamePipe,\n    private syncService: SyncService,\n    stateService: StateService,\n    private organizationService: OrganizationService,\n    private organizationApiService: OrganizationApiServiceAbstraction,\n    private organizationUserService: OrganizationUserService,\n    private dialogService: DialogService,\n    private router: Router,\n    private groupService: GroupService,\n    private collectionService: CollectionService\n  ) {\n    super(\n      apiService,\n      searchService,\n      i18nService,\n      platformUtilsService,\n      cryptoService,\n      validationService,\n      modalService,\n      logService,\n      searchPipe,\n      userNamePipe,\n      stateService\n    );\n  }\n\n  async ngOnInit() {\n    const organization$ = this.route.params.pipe(\n      map((params) => this.organizationService.get(params.organizationId)),\n      shareReplay({ refCount: true, bufferSize: 1 })\n    );\n\n    const policies$ = organization$.pipe(\n      switchMap((organization) => {\n        if (organization.isProviderUser) {\n          return from(this.policyApiService.getPolicies(organization.id)).pipe(\n            map((response) => this.policyService.mapPoliciesFromToken(response))\n          );\n        }\n\n        return this.policyService.policies$;\n      })\n    );\n\n    combineLatest([this.route.queryParams, policies$, organization$])\n      .pipe(\n        concatMap(async ([qParams, policies, organization]) => {\n          this.organization = organization;\n\n          // Backfill pub/priv key if necessary\n          if (\n            this.organization.canManageUsersPassword &&\n            !this.organization.hasPublicAndPrivateKeys\n          ) {\n            const orgShareKey = await this.cryptoService.getOrgKey(this.organization.id);\n            const orgKeys = await this.cryptoService.makeKeyPair(orgShareKey);\n            const request = new OrganizationKeysRequest(orgKeys[0], orgKeys[1].encryptedString);\n            const response = await this.organizationApiService.updateKeys(\n              this.organization.id,\n              request\n            );\n            if (response != null) {\n              this.organization.hasPublicAndPrivateKeys =\n                response.publicKey != null && response.privateKey != null;\n              await this.syncService.fullSync(true); // Replace oganizations with new data\n            } else {\n              throw new Error(this.i18nService.t(\"resetPasswordOrgKeysError\"));\n            }\n          }\n\n          const resetPasswordPolicy = policies\n            .filter((policy) => policy.type === PolicyType.ResetPassword)\n            .find((p) => p.organizationId === this.organization.id);\n          this.orgResetPasswordPolicyEnabled = resetPasswordPolicy?.enabled;\n\n          await this.load();\n\n          this.searchText = qParams.search;\n          if (qParams.viewEvents != null) {\n            const user = this.users.filter((u) => u.id === qParams.viewEvents);\n            if (user.length > 0 && user[0].status === OrganizationUserStatusType.Confirmed) {\n              this.events(user[0]);\n            }\n          }\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  async load() {\n    await super.load();\n  }\n\n  async getUsers(): Promise<OrganizationUserView[]> {\n    let groupsPromise: Promise<Map<string, string>>;\n    let collectionsPromise: Promise<Map<string, string>>;\n\n    // We don't need both groups and collections for the table, so only load one\n    const userPromise = this.organizationUserService.getAllUsers(this.organization.id, {\n      includeGroups: this.organization.useGroups,\n      includeCollections: !this.organization.useGroups,\n    });\n\n    // Depending on which column is displayed, we need to load the group/collection names\n    if (this.organization.useGroups) {\n      groupsPromise = this.getGroupNameMap();\n    } else {\n      collectionsPromise = this.getCollectionNameMap();\n    }\n\n    const [usersResponse, groupNamesMap, collectionNamesMap] = await Promise.all([\n      userPromise,\n      groupsPromise,\n      collectionsPromise,\n    ]);\n\n    return usersResponse.data?.map<OrganizationUserView>((r) => {\n      const userView = OrganizationUserView.fromResponse(r);\n\n      userView.groupNames = userView.groups\n        .map((g) => groupNamesMap.get(g))\n        .sort(this.i18nService.collator?.compare);\n      userView.collectionNames = userView.collections\n        .map((c) => collectionNamesMap.get(c.id))\n        .sort(this.i18nService.collator?.compare);\n\n      return userView;\n    });\n  }\n\n  async getGroupNameMap(): Promise<Map<string, string>> {\n    const groups = await this.groupService.getAll(this.organization.id);\n    const groupNameMap = new Map<string, string>();\n    groups.forEach((g) => groupNameMap.set(g.id, g.name));\n    return groupNameMap;\n  }\n\n  /**\n   * Retrieve a map of all collection IDs <-> names for the organization.\n   */\n  async getCollectionNameMap() {\n    const collectionMap = new Map<string, string>();\n    const response = await this.apiService.getCollections(this.organization.id);\n\n    const collections = response.data.map(\n      (r) => new Collection(new CollectionData(r as CollectionDetailsResponse))\n    );\n    const decryptedCollections = await this.collectionService.decryptMany(collections);\n\n    decryptedCollections.forEach((c) => collectionMap.set(c.id, c.name));\n\n    return collectionMap;\n  }\n\n  deleteUser(id: string): Promise<void> {\n    return this.organizationUserService.deleteOrganizationUser(this.organization.id, id);\n  }\n\n  revokeUser(id: string): Promise<void> {\n    return this.organizationUserService.revokeOrganizationUser(this.organization.id, id);\n  }\n\n  restoreUser(id: string): Promise<void> {\n    return this.organizationUserService.restoreOrganizationUser(this.organization.id, id);\n  }\n\n  reinviteUser(id: string): Promise<void> {\n    return this.organizationUserService.postOrganizationUserReinvite(this.organization.id, id);\n  }\n\n  async confirmUser(user: OrganizationUserView, publicKey: Uint8Array): Promise<void> {\n    const orgKey = await this.cryptoService.getOrgKey(this.organization.id);\n    const key = await this.cryptoService.rsaEncrypt(orgKey.key, publicKey.buffer);\n    const request = new OrganizationUserConfirmRequest();\n    request.key = key.encryptedString;\n    await this.organizationUserService.postOrganizationUserConfirm(\n      this.organization.id,\n      user.id,\n      request\n    );\n  }\n\n  allowResetPassword(orgUser: OrganizationUserView): boolean {\n    // Hierarchy check\n    let callingUserHasPermission = false;\n\n    switch (this.organization.type) {\n      case OrganizationUserType.Owner:\n        callingUserHasPermission = true;\n        break;\n      case OrganizationUserType.Admin:\n        callingUserHasPermission = orgUser.type !== OrganizationUserType.Owner;\n        break;\n      case OrganizationUserType.Custom:\n        callingUserHasPermission =\n          orgUser.type !== OrganizationUserType.Owner &&\n          orgUser.type !== OrganizationUserType.Admin;\n        break;\n    }\n\n    // Final\n    return (\n      this.organization.canManageUsersPassword &&\n      callingUserHasPermission &&\n      this.organization.useResetPassword &&\n      this.organization.hasPublicAndPrivateKeys &&\n      orgUser.resetPasswordEnrolled &&\n      this.orgResetPasswordPolicyEnabled &&\n      orgUser.status === OrganizationUserStatusType.Confirmed\n    );\n  }\n\n  showEnrolledStatus(orgUser: OrganizationUserUserDetailsResponse): boolean {\n    return (\n      this.organization.useResetPassword &&\n      orgUser.resetPasswordEnrolled &&\n      this.orgResetPasswordPolicyEnabled\n    );\n  }\n\n  private async showFreeOrgUpgradeDialog(): Promise<void> {\n    const orgUpgradeSimpleDialogOpts: SimpleDialogOptions = {\n      title: this.i18nService.t(\"upgradeOrganization\"),\n      content: this.i18nService.t(\n        this.organization.canManageBilling\n          ? \"freeOrgInvLimitReachedManageBilling\"\n          : \"freeOrgInvLimitReachedNoManageBilling\",\n        this.organization.seats\n      ),\n      type: SimpleDialogType.PRIMARY,\n    };\n\n    if (this.organization.canManageBilling) {\n      orgUpgradeSimpleDialogOpts.acceptButtonText = this.i18nService.t(\"upgrade\");\n    } else {\n      orgUpgradeSimpleDialogOpts.acceptButtonText = this.i18nService.t(\"ok\");\n      orgUpgradeSimpleDialogOpts.cancelButtonText = null; // hide secondary btn\n    }\n\n    const simpleDialog = this.dialogService.openSimpleDialog(orgUpgradeSimpleDialogOpts);\n\n    firstValueFrom(simpleDialog.closed).then((result: SimpleDialogCloseType | undefined) => {\n      if (!result) {\n        return;\n      }\n\n      if (result == SimpleDialogCloseType.ACCEPT && this.organization.canManageBilling) {\n        this.router.navigate([\"/organizations\", this.organization.id, \"billing\", \"subscription\"], {\n          queryParams: { upgrade: true },\n        });\n      }\n    });\n  }\n\n  async edit(user: OrganizationUserView, initialTab: MemberDialogTab = MemberDialogTab.Role) {\n    // Invite User: Add Flow\n    // Click on user email: Edit Flow\n\n    // User attempting to invite new users in a free org with max users\n    if (\n      !user &&\n      this.organization.planProductType === ProductType.Free &&\n      this.allUsers.length === this.organization.seats\n    ) {\n      // Show org upgrade modal\n      await this.showFreeOrgUpgradeDialog();\n      return;\n    }\n\n    const dialog = openUserAddEditDialog(this.dialogService, {\n      data: {\n        name: this.userNamePipe.transform(user),\n        organizationId: this.organization.id,\n        organizationUserId: user != null ? user.id : null,\n        usesKeyConnector: user?.usesKeyConnector,\n        initialTab: initialTab,\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    switch (result) {\n      case MemberDialogResult.Deleted:\n        this.removeUser(user);\n        break;\n      case MemberDialogResult.Saved:\n      case MemberDialogResult.Revoked:\n      case MemberDialogResult.Restored:\n        this.load();\n        break;\n    }\n  }\n\n  async bulkRemove() {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    const [modal] = await this.modalService.openViewRef(\n      BulkRemoveComponent,\n      this.bulkRemoveModalRef,\n      (comp) => {\n        comp.organizationId = this.organization.id;\n        comp.users = this.getCheckedUsers();\n      }\n    );\n\n    await modal.onClosedPromise();\n    await this.load();\n  }\n\n  async bulkRevoke() {\n    await this.bulkRevokeOrRestore(true);\n  }\n\n  async bulkRestore() {\n    await this.bulkRevokeOrRestore(false);\n  }\n\n  async bulkRevokeOrRestore(isRevoking: boolean) {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    const ref = this.modalService.open(BulkRestoreRevokeComponent, {\n      allowMultipleModals: true,\n      data: {\n        organizationId: this.organization.id,\n        users: this.getCheckedUsers(),\n        isRevoking: isRevoking,\n      },\n    });\n\n    await ref.onClosedPromise();\n    await this.load();\n  }\n\n  async bulkReinvite() {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    const users = this.getCheckedUsers();\n    const filteredUsers = users.filter((u) => u.status === OrganizationUserStatusType.Invited);\n\n    if (filteredUsers.length <= 0) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"noSelectedUsersApplicable\")\n      );\n      return;\n    }\n\n    try {\n      const response = this.organizationUserService.postManyOrganizationUserReinvite(\n        this.organization.id,\n        filteredUsers.map((user) => user.id)\n      );\n      this.showBulkStatus(\n        users,\n        filteredUsers,\n        response,\n        this.i18nService.t(\"bulkReinviteMessage\")\n      );\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n    this.actionPromise = null;\n  }\n\n  async bulkConfirm() {\n    if (this.actionPromise != null) {\n      return;\n    }\n\n    const [modal] = await this.modalService.openViewRef(\n      BulkConfirmComponent,\n      this.bulkConfirmModalRef,\n      (comp) => {\n        comp.organizationId = this.organization.id;\n        comp.users = this.getCheckedUsers();\n      }\n    );\n\n    await modal.onClosedPromise();\n    await this.load();\n  }\n\n  async events(user: OrganizationUserView) {\n    await this.modalService.openViewRef(EntityEventsComponent, this.eventsModalRef, (comp) => {\n      comp.name = this.userNamePipe.transform(user);\n      comp.organizationId = this.organization.id;\n      comp.entityId = user.id;\n      comp.showUser = false;\n      comp.entity = \"user\";\n    });\n  }\n\n  async resetPassword(user: OrganizationUserView) {\n    const [modal] = await this.modalService.openViewRef(\n      ResetPasswordComponent,\n      this.resetPasswordModalRef,\n      (comp) => {\n        comp.name = this.userNamePipe.transform(user);\n        comp.email = user != null ? user.email : null;\n        comp.organizationId = this.organization.id;\n        comp.id = user != null ? user.id : null;\n\n        // eslint-disable-next-line rxjs-angular/prefer-takeuntil\n        comp.onPasswordReset.subscribe(() => {\n          modal.close();\n          this.load();\n        });\n      }\n    );\n  }\n\n  protected async removeUserConfirmationDialog(user: OrganizationUserView) {\n    const warningMessage = user.usesKeyConnector\n      ? this.i18nService.t(\"removeUserConfirmationKeyConnector\")\n      : this.i18nService.t(\"removeOrgUserConfirmation\");\n\n    return this.platformUtilsService.showDialog(\n      warningMessage,\n      this.i18nService.t(\"removeUserIdAccess\", this.userNamePipe.transform(user)),\n      this.i18nService.t(\"yes\"),\n      this.i18nService.t(\"no\"),\n      \"warning\"\n    );\n  }\n\n  private async showBulkStatus(\n    users: OrganizationUserView[],\n    filteredUsers: OrganizationUserView[],\n    request: Promise<ListResponse<OrganizationUserBulkResponse>>,\n    successfullMessage: string\n  ) {\n    const [modal, childComponent] = await this.modalService.openViewRef(\n      BulkStatusComponent,\n      this.bulkStatusModalRef,\n      (comp) => {\n        comp.loading = true;\n      }\n    );\n\n    // Workaround to handle closing the modal shortly after it has been opened\n    let close = false;\n    // eslint-disable-next-line rxjs-angular/prefer-takeuntil\n    modal.onShown.subscribe(() => {\n      if (close) {\n        modal.close();\n      }\n    });\n\n    try {\n      const response = await request;\n\n      if (modal) {\n        const keyedErrors: any = response.data\n          .filter((r) => r.error !== \"\")\n          .reduce((a, x) => ({ ...a, [x.id]: x.error }), {});\n        const keyedFilteredUsers: any = filteredUsers.reduce((a, x) => ({ ...a, [x.id]: x }), {});\n\n        childComponent.users = users.map((user) => {\n          let message = keyedErrors[user.id] ?? successfullMessage;\n          // eslint-disable-next-line\n          if (!keyedFilteredUsers.hasOwnProperty(user.id)) {\n            message = this.i18nService.t(\"bulkFilteredMessage\");\n          }\n\n          return {\n            user: user,\n            error: keyedErrors.hasOwnProperty(user.id), // eslint-disable-line\n            message: message,\n          };\n        });\n        childComponent.loading = false;\n      }\n    } catch {\n      close = true;\n      modal.close();\n    }\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { canAccessMembersTab } from \"@bitwarden/common/abstractions/organization/organization.service.abstraction\";\n\nimport { OrganizationPermissionsGuard } from \"../guards/org-permissions.guard\";\n\nimport { PeopleComponent } from \"./people.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: PeopleComponent,\n    canActivate: [OrganizationPermissionsGuard],\n    data: {\n      titleId: \"members\",\n      organizationPermissions: canAccessMembersTab,\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class MembersRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { LooseComponentsModule } from \"../../shared\";\nimport { SharedOrganizationModule } from \"../shared\";\n\nimport { BulkConfirmComponent } from \"./components/bulk/bulk-confirm.component\";\nimport { BulkRemoveComponent } from \"./components/bulk/bulk-remove.component\";\nimport { BulkRestoreRevokeComponent } from \"./components/bulk/bulk-restore-revoke.component\";\nimport { BulkStatusComponent } from \"./components/bulk/bulk-status.component\";\nimport { UserDialogModule } from \"./components/member-dialog\";\nimport { ResetPasswordComponent } from \"./components/reset-password.component\";\nimport { MembersRoutingModule } from \"./members-routing.module\";\nimport { PeopleComponent } from \"./people.component\";\n\n@NgModule({\n  imports: [\n    SharedOrganizationModule,\n    LooseComponentsModule,\n    MembersRoutingModule,\n    UserDialogModule,\n  ],\n  declarations: [\n    BulkConfirmComponent,\n    BulkRemoveComponent,\n    BulkRestoreRevokeComponent,\n    BulkStatusComponent,\n    PeopleComponent,\n    ResetPasswordComponent,\n  ],\n})\nexport class MembersModule {}\n"],"names":["commaSeparatedEmails","control","value","undefined","split","map","email","trim","find","_","multipleEmails","message","onChildCheck","NestedCheckboxComponent","destroy$","Subject","onSavedUser","onDeletedUser","parentIndeterminate","this","children","some","key","every","ngOnInit","checkboxes","controls","parentId","valueChanges","pipe","takeUntil","subscribe","Object","values","forEach","setValue","emitEvent","parentCheckbox","entries","filter","parentChecked","index","item","ngOnDestroy","next","complete","pascalize","s","MemberDialogTab","MemberDialogResult","handleDependentPermissions","MemberDialogComponent","constructor","params","dialogRef","i18nService","platformUtilsService","organizationService","formBuilder","collectionAdminService","groupService","userService","organizationUserService","loading","editMode","isRevoked","access","collections","organizationUserType","PermissionMode","collectionAccessItems","groupAccessItems","formGroup","group","emails","type","externalId","disabled","accessAllCollections","accessSecretsManager","groups","permissionsGroup","manageAssignedCollectionsGroup","manageAssignedCollections","editAssignedCollections","deleteAssignedCollections","manageAllCollectionsGroup","manageAllCollections","createNewCollections","editAnyCollection","deleteAnyCollection","accessEventLogs","accessImportExport","accessReports","manageGroups","manageSso","managePolicies","manageUsers","manageResetPassword","submit","markAllAsTouched","invalid","tabIndex","Role","showToast","t","canUseCustomPermissions","customUserTypeSelected","userView","id","organizationUserId","organizationId","accessAll","permissions","setRequestPermissions","v","m","save","Set","length","setErrors","tooManyEmails","invite","name","close","Saved","delete","usesKeyConnector","showDialog","deleteOrganizationUser","Deleted","revoke","revokeOrganizationUser","Revoked","restore","restoreOrganizationUser","Restored","initialTab","title","organization$","of","get","shareReplay","refCount","bufferSize","groups$","switchMap","organization","useGroups","getAll","combineLatest","userDetails","useCustomPermissions","canUseSecretsManager","useSecretsManager","concat","c","mapCollectionToAccessItemView","g","mapGroupToAccessItemView","labelName","listName","Error","status","assignedCollectionsPermissions","allCollectionsPermissions","patchValue","collectionsFromGroups","includes","flatMap","accessSelection","collection","accessSelections","user","selection","permission","mapToAccessSelections","groupAccessSelections","groupId","mapToGroupAccessSelections","removeControl","check","select","checked","readOnly","selectAll","p","clearPermissions","partialPermissions","assign","document","getElementById","cancel","Canceled","result","readonly","readonlyPermission","viaGroupName","UserDialogModule","OrganizationUserConfirmRequest","UserConfirmComponent","cryptoService","logService","stateService","onConfirmedUser","dontAskAgain","publicKey","fingerprint","getFingerprint","userId","buffer","join","e","error","setAutoConfirmFingerprints","emit","BasePeopleComponent","apiService","searchService","validationService","modalService","searchPipe","userNamePipe","statusMap","Map","users","pagedUsers","allUsers","activeUsers","didScroll","pageSize","pagedUsersCount","allCount","invitedCount","has","userStatusType","Invited","acceptedCount","Accepted","confirmedCount","Confirmed","revokedCount","showConfirmUsers","showBulkConfirmUsers","load","response","getUsers","clear","set","L","data","Array","isArray","sort","u","push","resetPaging","loadMore","pagedLength","pagedSize","slice","checkUser","filteredUsers","transform","searchText","selectCount","i","edit","removeUserConfirmationDialog","remove","actionPromise","deleteUser","removeUser","showError","revokeWarningMessage","revokeUser","restoreUser","reinvite","reinviteUser","confirm","confirmUser","self","mapIndex","indexOf","splice","updateUser","publicKeyResponse","getUserPublicKey","autoConfirm","getAutoConfirmFingerPrints","modal","openViewRef","confirmModalRef","comp","formPromise","info","isSearching","isSearchable","isPaging","searching","getCheckedUsers","OrganizationUserView","groupNames","collectionNames","static","view","OrganizationUserBulkConfirmRequest","keys","BulkConfirmComponent","publicKeys","fingerprints","statuses","done","excludedUsers","isAccepted","getPublicKeys","entry","getCryptoKey","userIdsWithKeys","encryptedKey","rsaEncrypt","encryptedString","postConfirmRequest","postOrganizationUsersPublicKey","getOrgKey","request","postOrganizationUserBulkConfirm","BulkRemoveComponent","deleteUsers","deleteManyOrganizationUsers","removeUsersWarning","BulkRestoreRevokeComponent","config","isRevoking","bulkTitle","titleKey","performBulkUserAction","bulkMessage","userIds","revokeManyOrganizationUsers","restoreManyOrganizationUsers","BulkStatusComponent","ResetPasswordComponent","passwordGenerationService","policyService","onPasswordReset","newPassword","showPassword","masterPasswordPolicyOptions$","enforcedPasswordPolicyOptions","enforcedPolicyOptions","loggedOutWarningName","generatePassword","options","getOptions","passwordStrengthComponent","updatePasswordStrength","togglePassword","focus","copy","copyToClipboard","window","evaluateMasterPassword","passwordStrengthResult","score","getOrganizationUserResetPasswordDetails","then","kdfType","kdf","kdfIterations","kdfMemory","kdfParallelism","resetPasswordKey","encryptedPrivateKey","orgSymKey","decPrivateKey","decryptToBytes","decValue","rsaDecrypt","userEncKey","newKey","makeKey","toLowerCase","newPasswordHash","hashPassword","newEncKey","remakeEncKey","newMasterPasswordHash","putOrganizationUserResetPassword","getStrengthResult","nextId","ToggleGroupComponent","selectedChange","role","classList","onInputInteraction","selected","ToggleComponent","groupComponent","inputClasses","labelClasses","SearchInputComponent","onChange","notifyOnChange","onTouch","notifyOnTouch","registerOnChange","fn","registerOnTouched","writeValue","setDisabledState","isDisabled","provide","multi","useExisting","bulkConfirm","events","resetPassword","bulkReinvite","bulkRestore","bulkRevoke","bulkRemove","PeopleComponent","route","policyApiService","syncService","organizationApiService","dialogService","router","collectionService","super","userType","memberTab","orgResetPasswordPolicyEnabled","policies$","isProviderUser","from","getPolicies","mapPoliciesFromToken","queryParams","concatMap","qParams","policies","canManageUsersPassword","hasPublicAndPrivateKeys","orgShareKey","orgKeys","makeKeyPair","updateKeys","privateKey","fullSync","resetPasswordPolicy","policy","enabled","search","viewEvents","groupsPromise","collectionsPromise","userPromise","getAllUsers","includeGroups","includeCollections","getGroupNameMap","getCollectionNameMap","usersResponse","groupNamesMap","collectionNamesMap","Promise","all","r","fromResponse","collator","compare","groupNameMap","collectionMap","getCollections","decryptMany","postOrganizationUserReinvite","orgKey","postOrganizationUserConfirm","allowResetPassword","orgUser","callingUserHasPermission","useResetPassword","resetPasswordEnrolled","showEnrolledStatus","showFreeOrgUpgradeDialog","orgUpgradeSimpleDialogOpts","content","canManageBilling","seats","acceptButtonText","cancelButtonText","simpleDialog","openSimpleDialog","firstValueFrom","closed","navigate","upgrade","planProductType","dialog","open","lastValueFrom","bulkRemoveModalRef","onClosedPromise","bulkRevokeOrRestore","ref","allowMultipleModals","postManyOrganizationUserReinvite","showBulkStatus","bulkConfirmModalRef","eventsModalRef","entityId","showUser","entity","resetPasswordModalRef","warningMessage","successfullMessage","childComponent","bulkStatusModalRef","onShown","keyedErrors","reduce","a","x","keyedFilteredUsers","hasOwnProperty","routes","path","component","canActivate","titleId","organizationPermissions","MembersRoutingModule","MembersModule"],"sourceRoot":""}